{"version":3,"sources":["../../src/bc/multiverse.es6"],"names":["BN","require","BC_BT_VALIDATION","process","env","flatten","getGenesisBlock","validateSequenceTotalDistance","validateSequenceDifficulty","isValidBlockCached","validateBlockSequence","getNewestHeader","childrenHeightSum","standardId","getLogger","Multiverse","constructor","persistence","_persistence","_id","_chain","_logger","_height","_created","Math","floor","Date","now","blocks","blocksCount","length","purge","info","getParentHighestBlock","validateBlockSequenceInline","undefined","Promise","resolve","sorted","sort","a","b","getHeight","upperBound","lowerBound","upperBoundChild","get","getHash","getPreviousHash","reject","Error","unshift","err","warn","lowerBoundParent","push","getHighestBlock","getLowestBlock","hasBlock","newBlock","reduce","state","addBestBlock","currentHighestBlock","currentParentHighestBlock","error","getTotalDistance","gt","lt","shift","addNextBlock","type","newBlockHeaders","getBlockchainHeaders","getBtcList","roveredBlockHeaders","validateRoveredBlocks","currentHighestParent","asBuffer","softFail","getDistance","getTimBlockestamp","gte","getTimestamp","slice","newBlockNewestChildHeader","currentBlockNewestChildHeader","timestamp","debug","getDifficulty","getBlockchainHeadersCount","pop","isSyncLockActive","synclock","put","addResyncRequest","strict","syncLockActive","validNewBlock","validCurrentBlock","add","passed","passedNewBlock","passedOldBlock","block","receivedHeaders","receivedBlocks","Object","values","toObject","keys","map","blockchain","height","blocksData","getBulk","filter","getBlockchain","valid","previousKeys","parentBlock","previousBlocksData","previousBlocks","latestBlockchainNames","previousBlockchainNames","missingBlockchainNames","missing","key","indexOf","missingBlocks","chainKey","list","lowest","getEthList","getWavList","getNeoList","getLskList","correctSequence","updateValid","pb","console","log","toArray","toFlatArray","print"],"mappings":"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","file":"multiverse.js","sourcesContent":["/**\n * Copyright (c) 2017-present, blockcollider.org developers, All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type BcBlock from '../protos/core_pb'\nimport type { Logger } from 'winston'\nimport type PersistenceRocksDb from '../persistence/rocksdb'\n\nconst BN = require('bn.js')\nconst BC_BT_VALIDATION = process.env.BC_BT_VALIDATION === 'true'\nconst { flatten } = require('ramda')\n\nconst { getGenesisBlock } = require('./genesis')\nconst { validateSequenceTotalDistance, validateSequenceDifficulty, isValidBlockCached, validateBlockSequence, getNewestHeader, childrenHeightSum } = require('./validation')\nconst { standardId } = require('./helper')\nconst { getLogger } = require('../logger')\n\nexport class Multiverse {\n  _chain: BcBlock[]\n  _height: number\n  _created: number\n  _id: string\n  _logger: Logger\n  _persistence: PersistenceRocksDb\n\n  constructor (persistence: PersistenceRocksDb) {\n    this._persistence = persistence\n    this._id = standardId()\n    this._chain = []\n    this._logger = getLogger(`bc.multiverse.${this._id}`, false)\n    this._height = 0\n    this._created = Math.floor(Date.now() * 0.001)\n  }\n\n  get blocks (): Array<BcBlock> {\n    return this._chain\n  }\n\n  set blocks (blocks: BcBlock[]) {\n    this._chain = blocks\n  }\n\n  get blocksCount (): number {\n    const blocks = this._chain\n    return blocks.length\n  }\n\n  get persistence (): PersistenceRocksDb {\n    return this._persistence\n  }\n\n  purge () {\n    this._chain.length = 0\n    this._logger.info('metaverse has been purged')\n  }\n\n  /**\n   * Get second to highest block in Multiverse\n   */\n  getParentHighestBlock (): BcBlock|null {\n    if (this._chain.length > 1) {\n      return null\n    }\n    return this._chain[1]\n  }\n\n  /**\n   * Accessor for validation function\n   * @returns {*}\n   */\n  validateBlockSequence (blocks: BcBlock[]): boolean {\n    return validateBlockSequence(blocks)\n  }\n\n  /**\n   * Valid Block Range\n   * @returns {*}\n   */\n  async validateBlockSequenceInline (blocks: BcBlock[]): Promise<bool> {\n    if (blocks === undefined || blocks.length < 1) {\n      return Promise.resolve(false)\n    }\n    const sorted = blocks.sort((a, b) => {\n      if (a.getHeight() < b.getHeight()) {\n        return 1\n      }\n      if (a.getHeight() > b.getHeight()) {\n        return -1\n      }\n      return 0\n    })\n    // check if the actually sequence itself is valid\n    const upperBound = sorted[0]\n    const lowerBound = sorted[sorted.length - 1]\n\n    try {\n      const upperBoundChild = await this.persistence.get(`pending.bc.block.${sorted[0].getHeight()}`)\n      // current pending block does not match the purposed block at that height\n      if (upperBoundChild === undefined || upperBound.getHash() !== upperBoundChild.getPreviousHash()) return Promise.reject(new Error('pending block does not match purposed block'))\n      // add the child block of the sequence\n      sorted.unshift(upperBoundChild)\n    } catch (err) {\n      this._logger.warn('load warning')\n    }\n    if (lowerBound === 1) {\n      // if at final depth this will equal 1 or the genesis block\n      const lowerBoundParent = await this.persistence.get('bc.block.1')\n      if (lowerBound.getPreviousHash() !== lowerBoundParent.getHash()) return Promise.reject(new Error('sync did not resolve to genesis block'))\n      // add the genesis block to the sequence\n      sorted.push(lowerBoundParent)\n    }\n    // finally check the entire sequence\n    // enabled during AT\n    // if (!validateBlockSequence(sorted)) return Promise.reject(new Error('block sequence invalid'))\n\n    return Promise.resolve(true)\n  }\n\n  /**\n   * Get highest block in Multiverse\n   * @returns {*}\n   */\n  getHighestBlock (): BcBlock|null {\n    if (this._chain.length === 0) {\n      return\n    }\n    return this._chain[0]\n  }\n\n  /**\n   * Get lowest block by block key\n   * @returns {*}\n   */\n  getLowestBlock (): BcBlock|null {\n    if (this._chain.length > 0) {\n      return this._chain[this._chain.length - 1]\n    }\n    return null\n  }\n\n  /**\n   * check if a block exists\n   * @param newBlock\n   * @returns {boolean}\n   */\n  hasBlock (newBlock: BcBlock): boolean {\n    if (this._chain.length < 1) {\n      return false\n    }\n    return this._chain.reduce((state, b) => {\n      if (state === true) {\n        return state\n      } else if (b.getHash() === newBlock.getHash()) {\n        return true\n      }\n      return false\n    }, false)\n  }\n\n  /**\n   * Check if immmediate height is better\n   * @param newBlock\n   * @returns {boolean}\n   */\n  addBestBlock (newBlock: BcBlock): Promise<?boolean> {\n    const currentHighestBlock = this.getHighestBlock()\n    const currentParentHighestBlock = this.getParentHighestBlock()\n    if (currentHighestBlock === null || currentHighestBlock === undefined) {\n      // assume we always have current highest block\n      this._logger.error('Cannot get currentHighestBlock')\n      this._logger.info('bestBlock: failed  ')\n      return Promise.resolve(true)\n    }\n    // if no block is available go by total difficulty\n    // FAIL if new block not within 16 seconds of local time\n    // if (newBlock.getTimestamp() + 16 < Math.floor(Date.now() * 0.001)) {\n    //  this._logger.info('bestBlock: failed timestamp ')\n    //  return false\n    // }\n    // if there is no current parent, this block is the right lbock\n    if (currentParentHighestBlock === false) {\n      if (new BN(newBlock.getTotalDistance()).gt(new BN(currentHighestBlock.getTotalDistance()))) {\n        this._logger.info('best block failed newBlock total distance < current block total distance')\n        this._chain.length = 0\n        this._chain.push(newBlock)\n        return Promise.resolve(true)\n      }\n      return Promise.resolve(false)\n    }\n    // FAIL if newBlock total difficulty <  currentHighestBlock\n    if (new BN(newBlock.getTotalDistance()).lt(new BN(currentHighestBlock.getTotalDistance()))) {\n      this._logger.info('best block failed newBlock total distance < current block total distance')\n      return Promise.resolve(false)\n    }\n    // if the current block at the same height is better switch\n    if (currentParentHighestBlock !== null &&\n        currentParentHighestBlock !== undefined &&\n        newBlock.getPreviousHash() === currentParentHighestBlock.getHash()) {\n      // validateBlockSequence([newBlock, currentParentHighestBlock]) === true) {\n      this._logger.info('new block at its height greater total than block in multiverse')\n      this._chain.shift()\n      this._chain.unshift(newBlock)\n      return Promise.resolve(true)\n    }\n    return Promise.resolve(false)\n  }\n\n  /**\n   * Eval and update multiverse with next block\n   * @param block New block\n   * @returns {boolean}\n   */\n  async addNextBlock (newBlock: BcBlock, type: Number = 0): Promise<?boolean> {\n    // return false for empty block\n    if (newBlock === undefined || newBlock === null) {\n      this._logger.warn('no block was given to evaluate')\n      return Promise.resolve(false)\n    }\n\n    const newBlockHeaders = newBlock.getBlockchainHeaders()\n    if (newBlock.getHeight() !== 1 && newBlockHeaders.getBtcList().length > 0 && BC_BT_VALIDATION === true && new BN(newBlockHeaders.getBtcList()[0].getHeight()).gt(new BN(541000)) === true) {\n      return Promise.resolve(false)\n    } else if (newBlock.getHeight() !== 1 && newBlockHeaders.getBtcList().length > 0 && new BN(newBlockHeaders.getBtcList()[0].getHeight()).gt(new BN(545000)) === true && new BN(newBlock.getHeight()).lt(new BN(530000)) === true) {\n      return Promise.resolve(false)\n    }\n    // if there are no blocks in the multiverse this block is the highest\n    // in default setup the contructor loads the genesis block into the multiverse\n    if (this._chain.length === 0) {\n      this._chain.push(newBlock)\n      return Promise.resolve(true)\n    }\n\n    const currentHighestBlock = await this.persistence.get('bc.block.latest')\n    // PASS\n    // no other candidate in Multiverse\n    if (currentHighestBlock === null || currentHighestBlock === undefined) {\n      this._chain.unshift(newBlock)\n      return Promise.resolve(true)\n    }\n\n    const roveredBlockHeaders = await this.validateRoveredBlocks(newBlock)\n    if (roveredBlockHeaders === false) {\n      this._logger.info('sequence failed')\n    //  return Promise.resolve(false)\n    }\n    // HOTSWAP - NO SYNC\n    // this is a hotswap in at the current block height for a new block\n    // TODO: Consider moving this to resync (except we dont want sync triggered)\n    const currentHighestParent = await this.persistence.get('bc.block.parent', { asBuffer: true, softFail: true })\n    if (currentHighestParent !== false && currentHighestParent.getHash() !== currentHighestBlock.getPreviousHash() &&\n       currentHighestBlock.getHeight() === newBlock.getHeight() &&\n       new BN(currentHighestBlock.getHeight()) === new BN(newBlock.getDistance()) &&\n       validateSequenceDifficulty(currentHighestParent, newBlock) === true) {\n      if (new BN(newBlock.getTotalDistance()).gt(new BN(currentHighestBlock.getTotalDistance())) === true &&\n          new BN(newBlock.getTimBlockestamp()).gte(new BN(currentHighestBlock.getTimestamp())) === true) {\n        this._chain.shift()\n        this._chain.unshift(newBlock)\n        this._logger.warn('hs occured ' + newBlock.getHeight() + ' <-> ' + newBlock.getHeight() + ' all clear <- ref hash' + newBlock.getHash().slice(0, 12))\n        return Promise.resolve(true)\n      }\n    }\n\n    if (newBlock.getHeight() === 1 || newBlock.getHeight() === '1') {\n      // block being sent is genesis block\n      return Promise.resolve(false)\n    }\n\n    this._logger.info('newBlock height: ' + newBlock.getHeight())\n    this._logger.info('currentHighestBlock height: ' + currentHighestBlock.getHeight())\n    if (newBlock.getHeight() - 1 !== currentHighestBlock.getHeight()) {\n      // block being sent is genesis block\n      this._logger.warn('block is not in sequence correctly')\n      return Promise.resolve(false)\n    }\n\n    this._logger.warn('child height new block: ' + childrenHeightSum(newBlock))\n    this._logger.warn('child height previous block: ' + childrenHeightSum(currentHighestBlock))\n    if (new BN(childrenHeightSum(newBlock)).lt(new BN(childrenHeightSum(currentHighestBlock)))) {\n      this._logger.warn('connection child chain weight is below threshold')\n      // after block height 500000 resume traditional assertions even if BC_BT_VALIDATION is true\n      return Promise.resolve(false)\n    }\n\n    // if difficulty is invalid and we have not enabled BC_BT_VALIDATION on this node reject as next block\n    if (!validateSequenceDifficulty(currentHighestBlock, newBlock)) {\n      this._logger.info('invalid difficulties')\n      return Promise.resolve(false)\n    }\n    // if it has an invalid total distance and we have not enabled BC_BT_VALIDATION fail the block\n    if (!validateSequenceTotalDistance(currentHighestBlock, newBlock)) {\n      this._logger.info('invalid total distance')\n      return Promise.resolve(false)\n    }\n\n    if (childrenHeightSum(newBlock) === childrenHeightSum(currentHighestBlock)) {\n      this._logger.warn('evaluating child chain weight on equality conditional')\n      const newBlockNewestChildHeader = getNewestHeader(newBlock)\n      const currentBlockNewestChildHeader = getNewestHeader(currentHighestBlock)\n\n      this._logger.info('new block newest child header: ' + newBlockNewestChildHeader)\n      this._logger.info('current block newest child header: ' + currentBlockNewestChildHeader)\n      if (new BN(getNewestHeader(newBlock).timestamp).lt(new BN(getNewestHeader(currentHighestBlock).timestamp)) === true) {\n        return Promise.resolve(false)\n      }\n    }\n\n    // FAIL\n    // case fails over into the resync\n    if (newBlock.getHeight() - 7 > currentHighestBlock.getHeight()) {\n      return Promise.resolve(false)\n    }\n\n    this._logger.debug(' highestBlock hash - ' + currentHighestBlock.getHash())\n    this._logger.debug(' highestBlock previousHash - ' + currentHighestBlock.getPreviousHash())\n    this._logger.debug(' highestBlock height - ' + currentHighestBlock.getHeight())\n    this._logger.debug(' highestBlock difficulty - ' + currentHighestBlock.getDifficulty())\n    this._logger.debug(' newBlock hash - ' + newBlock.getHash())\n    this._logger.debug(' newBlock difficulty - ' + newBlock.getDifficulty())\n    this._logger.debug(' newBlock previousHash - ' + newBlock.getPreviousHash())\n    // Fail is the block hashes are identical\n    if (currentHighestBlock !== undefined && newBlock.getHash() === currentHighestBlock.getHash()) {\n      this._logger.warn('newBlock hash === currentHighestBlock hash')\n      return Promise.resolve(false)\n    }\n\n    // FAIL\n    // case fails over into the resync\n    if (newBlock.getHeight() < currentHighestBlock.getHeight()) {\n      return Promise.resolve(false)\n    }\n\n    if (new BN(newBlock.getTotalDistance()).lt(new BN(currentHighestBlock.getTotalDistance()))) {\n      this._logger.warn('new Block totalDistance ' + newBlock.getTotalDistance() + 'less than currentHighestBlock' + currentHighestBlock.getTotalDistance())\n      return Promise.resolve(false)\n    }\n\n    // FAIL\n    // if newBlock does not include additional rover blocks\n    if (newBlock.getBlockchainHeadersCount() === '0') {\n      this._logger.warn('new Block total headers count is below threshold')\n      return Promise.resolve(false)\n    }\n\n    // AT STRICT TIMELINE\n    // without ire from retrograde\n\n    // if malformed timestamp referenced from previous block with three second lag\n    if (newBlock.getTimestamp() + 3 <= currentHighestBlock.getTimestamp()) {\n      this._logger.info('purposed block ' + newBlock.getHash() + ' has invalid timestamp ' + newBlock.getTimestamp() + ' from current height timestamp ' + currentHighestBlock.getTimestamp())\n      return Promise.resolve(false)\n    }\n    // FAIL if timestamp of block is greater than 27 seconds from system time\n    if (newBlock.getTimestamp() + 27 < Math.floor(Date.now() * 0.001)) {\n      this._logger.info('purposed block ' + newBlock.getHash() + ' has invalid timestamp ' + newBlock.getTimestamp() + ' from current height timestamp ' + currentHighestBlock.getTimestamp())\n      return Promise.resolve(false)\n    }\n\n    // FAIL\n    // if newBlock does not reference the current highest block as it's previous hash\n    if (newBlock.getPreviousHash() !== currentHighestBlock.getHash()) {\n      this._logger.info('purposed block ' + newBlock.getHash() + ' previous hash not current highest ' + currentHighestBlock.getHash())\n      return this.addBestBlock(newBlock)\n    }\n    // FAIL\n    // if newBlock does not reference the current highest block as it's previous hash\n    // note this ignores the first block immediately following the genesis block due to lack of rovered blocks in the genesis block\n    if (newBlock.getHeight() > 2 && validateBlockSequence([newBlock, currentHighestBlock]) !== true) {\n      this._logger.info('addition of block ' + newBlock.getHash() + ' creates malformed child blockchain sequence')\n      return this.addBestBlock(newBlock)\n    }\n    // PASS\n    // add the new block to the parent position\n    this._chain.unshift(newBlock)\n\n    // const validRovers = validateRoveredSequences([newBlock, currentHighestBlock])\n    // if (validRovers === false) {\n    //  this._logger.info('multiverse contains wayward rovers')\n    //  // disabled until AT\n    //  // return this.addBestBlock(newBlock)\n    // }\n\n    if (this._chain.length > 7) {\n      this._chain.pop()\n    }\n\n    return Promise.resolve(true)\n  }\n\n  async isSyncLockActive (): Promise<boolean> {\n    try {\n      const synclock = await this.persistence.get('synclock')\n\n      if (synclock.getHeight() !== 1 && (synclock.getTimestamp() + 111) < Math.floor(Date.now() * 0.001)) {\n        await this.persistence.put('synclock', getGenesisBlock())\n        this._logger.warn('sync lock is stale resetting')\n        return Promise.resolve(false)\n      } else if (synclock.getHeight() === 1) {\n        return Promise.resolve(false)\n      }\n      return Promise.resolve(true)\n    } catch (err) {\n      this._logger.error(err)\n      return Promise.resolve(true)\n    }\n  }\n\n  /**\n   * Check if block sould be queued for resync as a potentially bettter path\n   * if returns true miner is paused\n   * @param newBlock\n   * @returns {boolean}\n   */\n  async addResyncRequest (newBlock: BcBlock, strict: boolean = true): Promise<boolean> {\n    // check if the node is currently syncing, if so do not approve a sync\n    const syncLockActive = await this.isSyncLockActive()\n\n    if (syncLockActive === true) {\n      this._logger.info('proposed block ' + newBlock.getHeight() + ' not accepted <- active sync lock')\n      return Promise.resolve(false)\n    }\n    const currentParentHighestBlock = this.getParentHighestBlock()\n    const currentHighestBlock = await this.persistence.get('bc.block.latest')\n\n    const newBlockHeaders = newBlock.getBlockchainHeaders()\n    if (newBlock.getHeight() !== 1 && newBlockHeaders.getBtcList().length > 0 && BC_BT_VALIDATION === true && new BN(newBlockHeaders.getBtcList()[0].getHeight()).gt(new BN(541000)) === true) {\n      this._logger.info('failed resync <- BC_BT_VALIDATION')\n      return Promise.resolve(false)\n    } else if (newBlock.getHeight() !== 1 && newBlockHeaders.getBtcList().length > 0 && new BN(newBlockHeaders.getBtcList()[0].getHeight()).gt(new BN(545000)) === true && new BN(newBlock.getHeight()).lt(new BN(530000)) === true) {\n      return Promise.resolve(false)\n    }\n\n    const roveredBlockHeaders = await this.validateRoveredBlocks(newBlock)\n    if (roveredBlockHeaders === false) {\n      this._logger.info('child header weight <- below threshold')\n      // return Promise.resolve(false)\n    }\n    // current chain is malformed and new block is not\n    const validNewBlock = await isValidBlockCached(this.persistence, newBlock)\n    const validCurrentBlock = await isValidBlockCached(this.persistence, currentHighestBlock)\n    if (validNewBlock === true && validCurrentBlock === false) {\n      this._logger.info('passed sync req <- currentHighestBlock malformed')\n      return Promise.resolve(true)\n    }\n\n    if (this._chain.length === 0) {\n      this._logger.info('passed sync req <- currentHighestBlock not set')\n      return Promise.resolve(true)\n    }\n\n    // pass if no highest block exists go with current\n    if (currentHighestBlock === null) {\n      this._logger.info('passed resync req <- currentHighestBlock not set')\n      return Promise.resolve(true)\n    }\n\n    // only block is the genesis block\n    if (currentHighestBlock.getHeight() === 1 && newBlock.getHeight() > 1) {\n      this._logger.info('passed resync req <- new block above genesis')\n      return Promise.resolve(true)\n    }\n\n    // Fail if the block hashes are identical\n    if (newBlock.getHash() === currentHighestBlock.getHash()) {\n      this._logger.info('failed resync req <- newBlock non-unique hash')\n      return Promise.resolve(false)\n    }\n\n    this._logger.warn('child height new block: ' + childrenHeightSum(newBlock))\n    this._logger.warn('child height previous block: ' + childrenHeightSum(currentHighestBlock))\n    if (childrenHeightSum(newBlock) < childrenHeightSum(currentHighestBlock)) {\n      this._logger.warn('connection chain weight is below threshold')\n      return Promise.resolve(false)\n    }\n\n    // PASS if current highest block is older than 28 seconds from local time\n    // OR if received blockheight is more than 10 away from current\n    // (means our current block is stale by 2-3 minutes of block time)\n    if ((new BN(new BN(currentHighestBlock.getTimestamp()).add(new BN(28))).lt(new BN(Math.floor(Date.now() * 0.001))) === true || new BN(new BN(currentHighestBlock.getHeight()).add(new BN(1))).lt(new BN(newBlock.getHeight()))) === true &&\n       new BN(currentHighestBlock.getTotalDistance()).lt(new BN(newBlock.getTotalDistance())) === true &&\n       new BN(getNewestHeader(newBlock).timestamp).gte(new BN(getNewestHeader(currentHighestBlock).timestamp)) === true) {\n      this._logger.info('current chain is stale chain new child time: ' + getNewestHeader(newBlock).timestamp + ' current child time: ' + getNewestHeader(currentHighestBlock).timestamp)\n      return Promise.resolve(true)\n    }\n\n    // FAIL if new block not within 31 seconds of local time\n    if (new BN(newBlock.getHeight()).gt(100000) === true && newBlock.getTimestamp() + 31 < Math.floor(Date.now() * 0.001)) {\n      this._logger.warn('failed resync req: purposed block time has expired')\n      return Promise.resolve(false)\n    }\n\n    // FAIL if new block not within 31 seconds of local time\n    if (new BN(newBlock.getHeight()).gt(100000) === true && newBlock.getTimestamp() - 31 > Math.floor(Date.now() * 0.001)) {\n      this._logger.warn('failed resync req: purposed block beyond temporal limit')\n      return Promise.resolve(false)\n    }\n\n    if (this._chain.length < 2) {\n      this._logger.info('determining if chain current total distance is less than new block')\n      if (new BN(currentHighestBlock.getTotalDistance()).lt(new BN(newBlock.getTotalDistance())) === true &&\n          new BN(childrenHeightSum(currentHighestBlock)).lt(new BN(childrenHeightSum(newBlock))) === true) {\n        const passed = await this.validateRoveredBlocks(newBlock)\n        if (passed === true) {\n          return Promise.resolve(true)\n        }\n      }\n    }\n\n    if (currentParentHighestBlock === null && currentHighestBlock !== null) {\n      if (new BN(newBlock.getTotalDistance()).gt(new BN(currentHighestBlock.getTotalDistance())) &&\n         new BN(newBlock.getDifficulty()).gt(new BN(currentHighestBlock.getDifficulty())) === true) {\n        const passed = this.validateRoveredBlocks(newBlock)\n        if (passed === true) {\n          return Promise.resolve(true)\n        }\n      }\n    }\n\n    // FAIL if newBlock total difficulty <  currentHighestBlock\n    if (new BN(newBlock.getTotalDistance()).lt(new BN(currentHighestBlock.getTotalDistance())) === true) {\n      this._logger.info('failed resync req: new block distance is lower than highest block')\n      return Promise.resolve(false)\n    }\n\n    // pick the chain we have rovered blocks for\n    if (childrenHeightSum(newBlock) <= childrenHeightSum(currentHighestBlock)) {\n      this._logger.warn('child height new block: ' + childrenHeightSum(newBlock))\n      this._logger.warn('child height previous block: ' + childrenHeightSum(currentHighestBlock))\n\n      const passedNewBlock = await this.validateRoveredBlocks(newBlock)\n      if (passedNewBlock === true) {\n        const passedOldBlock = await this.validateRoveredBlocks(currentHighestBlock)\n        if (passedOldBlock === false) {\n          return Promise.resolve(true)\n        }\n      }\n      return Promise.resolve(false)\n    }\n    return Promise.resolve(false)\n  }\n\n  async validateRoveredBlocks (block: BcBlock): Promise<boolean> {\n    // construct key array like ['btc.block.528089', ..., 'wav.block.1057771', 'wav.blocks.1057771']\n    this._logger.info('evaluate rovered headers weight')\n    const receivedHeaders = block.getBlockchainHeaders()\n    const receivedBlocks = flatten(Object.values(block.getBlockchainHeaders().toObject()))\n    const keys = receivedBlocks\n      // $FlowFixMe - Object.values is not generic\n      .map(({ blockchain, height }) => `${blockchain}.block.${height}`)\n\n    const blocksData = await this.persistence.getBulk(keys)\n    const blocks = blocksData.filter((b) => {\n      if (b !== undefined && b.constructor !== true.constructor && b.getBlockchain !== undefined) {\n        return b\n      }\n    })\n\n    let valid = keys.length === blocks.length\n\n    if (!valid) {\n      /* eslint-disable */\n      const previousKeys = receivedBlocks\n        // $FlowFixMe - Object.values is not generic\n        .map((b) => `${b.blockchain}.block.${(b.height - 1)}`)\n      //console.log('------- KEYS ---------')\n      //console.log(keys)\n      //console.log('------- PREV KEYS ---------')\n      //console.log(previousKeys)\n      const parentBlock = await this.persistence.get('bc.block.parent')\n      // if the parent block is one accept the given child headers\n      if(parentBlock.getHeight() === '1'){\n        return Promise.resolve(true)\n      }\n      const previousBlocksData = await this.persistence.getBulk(previousKeys)\n      const previousBlocks = previousBlocksData.filter((b) => {\n        if(b !== undefined && b.constructor !== true.constructor && b.getBlockchain !== undefined){\n          return b\n        }\n      })\n\n      if(previousBlocks === undefined || previousBlocks === false || previousBlocks.length !== keys.length){\n        this._logger.warn('previous blocks not available for sequence confirmation')\n        return Promise.resolve(false)\n      }\n\n      const latestBlockchainNames = blocks.map((b) => {\n        return b.getBlockchain()\n      })\n\n      const previousBlockchainNames = previousBlocks.map((b) => {\n        return b.getBlockchain()\n      })\n\n      const missingBlockchainNames = keys.reduce((missing, key) => {\n        if(latestBlockchainNames.indexOf(key) < 0){\n          missing.push(key)\n        }\n        return missing\n      }, [])\n\n      const missingBlocks = missingBlockchainNames.reduce((missing, blockchain) => {\n        const chainKey = 'get' + blockchain + 'List'\n        let list = []\n        let lowest\n        if(blockchain === 'btc'){\n          list = receivedHeaders.getBtcList().sort((a, b) => {\n            if(new BN(a).gt(new BN(b)) === true){\n              return -1\n            }\n            if(new BN(a).lt(new BN(b)) === true){\n              return 1\n            }\n            return 0\n          })\n          if(list.length > 0){\n            lowest = list.pop()\n          }\n        } else if (blockchain === 'eth'){\n          list = receivedHeaders.getEthList().sort((a, b) => {\n            if(new BN(a).gt(new BN(b)) === true){\n              return -1\n            }\n            if(new BN(a).lt(new BN(b)) === true){\n              return 1\n            }\n            return 0\n          })\n          if(list.length > 0){\n            lowest = list.pop()\n          }\n        } else if (blockchain === 'wav'){\n          list = receivedHeaders.getWavList().sort((a, b) => {\n            if(new BN(a).gt(new BN(b)) === true){\n              return -1\n            }\n            if(new BN(a).lt(new BN(b)) === true){\n              return 1\n            }\n            return 0\n          })\n          if(list.length > 0){\n            lowest = list.pop()\n          }\n        } else if (blockchain === 'neo'){\n          list = receivedHeaders.getNeoList().sort((a, b) => {\n            if(new BN(a).gt(new BN(b)) === true){\n              return -1\n            }\n            if(new BN(a).lt(new BN(b)) === true){\n              return 1\n            }\n            return 0\n          })\n          if(list.length > 0){\n            lowest = list.pop()\n          }\n        } else if (blockchain === 'lsk'){\n          list = receivedHeaders.getLskList().sort((a, b) => {\n            if(new BN(a).gt(new BN(b)) === true){\n              return -1\n            }\n            if(new BN(a).lt(new BN(b)) === true){\n              return 1\n            }\n            return 0\n          })\n          if(list.length > 0){\n            lowest = list.pop()\n          }\n        }\n        if(lowest !== undefined){\n          missing.push(lowest)\n        }\n        return missing\n      }, [])\n\n      //console.log('------- BLOCKS ON DISK ---------')\n      //console.log(latestBlockchainNames)\n      //console.log('------- PREVIOUS BLOCKS ON DISK ---------')\n      //console.log(previousBlockchainNames)\n      //console.log('------- UNROVERED BLOCKS ---------')\n      //console.log(missingBlockchainNames)\n\n      const correctSequence = missingBlocks.reduce((valid, block) => {\n        if(block.getBlockchain() === 'btc' && BC_BT_VALIDATION === true){\n          if(new BN(block.getHeight()).gt(new BN(541000)) === true){\n            valid = false\n          }\n        }\n        if(valid === true) {\n          valid = previousBlocks.reduce((updateValid, pb) => {\n            if(block.getBlockchain() === pb.getBlockchain()){\n              console.log('eval blockchain ' + pb.getBlockchain() + ' previousHash: ' + pb.getPreviousHash() + ' hash: ' + block.getHash())\n              if(!validateBlockSequence([pb, block])){\n                console.log('for blockchain ' + pb.getBlockchain() + ' sequence is INVALID previousHash: ' + pb.getPreviousHash() + ' hash: ' + block.getHash())\n                updateValid = false\n              }\n            }\n            return updateValid\n          }, true)\n        }\n        return valid\n      }, true)\n\n      this._logger.warn('purposed child blocks not known by rover <- correctSequence: ' + correctSequence)\n      return Promise.resolve(correctSequence)\n    }\n\n    // const pairs = zip(receivedBlocks, blocks)\n\n    // const isChained = Promise.resolve(all(flag => flag === true, pairs.map(([received, expected]) => {\n    //  // $FlowFixMe\n    //  return received.hash === expected.getHash() &&\n    //    // $FlowFixMe\n    //    received.height === expected.getHeight() &&\n    //    // $FlowFixMe\n    //    received.merkleRoot === expected.getMerkleRoot() &&\n    //    // $FlowFixMe\n    //    received.timestamp === expected.getTimestamp()\n    // })))\n\n    return Promise.resolve(true)\n    // disabled until AT\n    // if (isChained !== true) {\n    //  this._logger.info('failed chained check')\n    // }\n    // return isChained\n  }\n\n  /**\n   * Get multiverse as nested `BcBlock` array\n   * @returns {*}\n   */\n  toArray (): Array<Array<BcBlock>> {\n    return this._chain\n  }\n\n  /**\n   * Get multiverse as flat `BcBlock` array\n   */\n  toFlatArray (): Array<BcBlock> {\n    const blocks = this.toArray()\n    return flatten(blocks)\n  }\n\n  // NOTE: Multiverse print disabled. Why?\n  print () {\n    // this._logger.info(this._blocks)\n    this._logger.info('multiverse print disabled')\n  }\n}\n\nexport default Multiverse\n"]}