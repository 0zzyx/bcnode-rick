{"version":3,"sources":["../../src/mining/thread.es6"],"names":["process","require","getExpFactorDiff","getNewPreExpDifficulty","getNewBlockCount","mine","BlockchainHeaders","BlockchainHeader","BcBlock","ts","default","cluster","logging","mean","max","BN","ps","fkill","minerRecycleInterval","Math","floor","random","globalLog","getLogger","__filename","purgeWorkers","force","on","err","error","stack","settings","maxWorkers","sendWorker","worker","msg","Promise","resolve","reject","send","isMaster","stats","once","exit","info","active","record","data","createThread","fork","unshift","id","applyEvents","iterations","div","timeDiff","toNumber","length","pop","type","workId","workers","undefined","Object","keys","map","isConnected","disconnect","kill","catch","message","deploy","i","setInterval","then","debug","workerLimit","distancePerSecond","distancePerRadianSecond","coreCountAdjustment","mul","formattedMetric","round","console","log","pid","title","variableTimeout","setTimeout","main","currentTimestamp","offset","work","minerKey","merkleRoot","newestChildBlock","difficulty","difficultyData","offsetOverride","deserialize","buffer","clazz","deserializeBinary","Uint8Array","values","n","parseInt","difficultyCalculator","lastPreviousBlock","newBlockHeaders","lastPreviousBlockProto","newBlockHeadersProto","timestamp","newBlockCount","getBlockchainHeaders","preExpDiff","getHeight","toString","solution","JSON","stringify","e","warn"],"mappings":"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","file":"thread.js","sourcesContent":["\n\n/**\n * Copyright (c) 2017-present, blockcollider.org developers, All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n/* eslint-disable */\nimport type {\n    Logger\n} from 'winston'\nconst process = require('process')\nconst {\n    getExpFactorDiff,\n    getNewPreExpDifficulty,\n    getNewBlockCount,\n    mine\n} = require('./primitives')\nconst {\n    BlockchainHeaders,\n    BlockchainHeader,\n    BcBlock\n} = require('../protos/core_pb')\nconst ts = require('../utils/time').default // ES6 default export\nconst cluster = require('cluster')\nconst logging = require('../logger')\nconst { mean, max } = require('ramda')\nconst BN = require('bn.js')\nconst ps = require('ps-node')\nconst fkill = require('fkill')\nconst minerRecycleInterval = 660000 + Math.floor(Math.random() * 10) * 10000\nconst globalLog: Logger = logging.getLogger(__filename)\n// setup logging of unhandled rejections\n//\n//\n\nconst purgeWorkers = () => {\n\t\treturn fkill('bcworker', { force: true })\n}\nprocess.on('uncaughtError', (err) => {\n    // $FlowFixMe\n    globalLog.error(`error, trace:\\n${err.stack}`)\n})\nprocess.on('unhandledRejection', (err) => {\n    // $FlowFixMe\n    globalLog.error(`rejected promise, trace:\\n${err.stack}`)\n})\n\nconst settings = {\n    maxWorkers: 3\n}\n\nconst sendWorker = (worker, msg) => {\n    return new Promise((resolve, reject) => {\n        try {\n            return worker.send(msg, resolve)\n        } catch (err) {\n            return reject(err)\n        }\n    })\n}\n\n\nif (cluster.isMaster) {\n\n\t\tconst stats = []\n\n    process.once(\"SIGTERM\", () => {\n        process.exit(0)\n    })\n    process.once(\"SIGINT\", () => {\n        process.exit(0)\n    })\n    process.once(\"exit\", () => {\n        globalLog.info('worker exited')\n    })\n\n    const active = []\n    const record = {}\n\t\t/* eslint-enable */\n\n  process.on('message', (data) => {\n    const createThread = function () {\n      const worker = cluster.fork()\n      active.unshift(worker.id)\n      return worker\n    }\n\n    const applyEvents = (worker) => {\n      worker.once('message', (data) => {\n        stats.unshift(new BN(data.data.iterations).div(new BN(data.data.timeDiff)).toNumber())\n        if (stats.length > 5) { stats.pop() }\n        process.send({\n          type: 'solution',\n          data: data.data,\n          workId: data.workId\n        }, () => {\n          (async () => {\n            active.length = 0\n            if (cluster.workers !== undefined && Object.keys(cluster.workers).length > 0) {\n              Object.keys(cluster.workers).map((id) => {\n                if (cluster.workers[id].isConnected() === true) {\n                  cluster.workers[id].disconnect()\n                }\n                if (cluster.workers[id] !== undefined) {\n                  cluster.workers[id].kill()\n                }\n              })\n            }\n          })()\n            .catch((err) => {\n              globalLog.error(err.message + ' ' + err.stack)\n            })\n        })\n      })\n      return worker\n    }\n    if (data.type === 'config') {\n      settings.maxWorkers = data.maxWorkers || settings.maxWorkers\n    } else if (data.type === 'work') {\n      // expressed in Radians (cycles/second) / 2 * PI\n      (async () => {\n        // const workerA = applyEvents(createThread())\n        // await sendWorker(workerA, data.data)\n        // const workerB = applyEvents(createThread())\n        // await sendWorker(workerB, data.data)\n        if (Object.keys(cluster.workers).length < settings.maxWorkers) {\n          const deploy = settings.maxWorkers - Object.keys(cluster.workers).length\n          //   const worker = applyEvents(createThread())\n          //   await sendWorker(worker, data.data)\n          // const deploy = settings.maxWorkers\n          for (let i = 0; i < deploy; i++) {\n            const worker = applyEvents(createThread())\n            await sendWorker(worker, data.data)\n          }\n        }\n      })()\n        .catch((err) => {\n          globalLog.error(err.message + ' ' + err.stack)\n        })\n    }\n  })\n\n  setInterval(() => {\n    if (Object.keys(cluster.workers).length > 0) {\n      fkill('bcworker', { force: true })\n        .then(() => {\n          globalLog.info('global pool rebase success')\n        })\n        .catch((err) => {\n          globalLog.debug(err.message)\n        })\n    }\n  }, minerRecycleInterval)\n\n  /* eslint-disable */\n  setInterval(() => {\n    if(stats.length >= 5) {\n       let workerLimit = 1\n       if(cluster.workers !== undefined && Object.keys(cluster.workers).length > 1){\n         workerLimit = Object.keys(cluster.workers).length\n       }\n       const distancePerSecond = mean(stats) * 1000\n       const distancePerRadianSecond = new BN(distancePerSecond).div(new BN(6.283)).toNumber()\n       const coreCountAdjustment = new BN(distancePerRadianSecond).mul(new BN(workerLimit)).toNumber()\n       const formattedMetric = Math.round(coreCountAdjustment * 100) / 100000\n\n       if(formattedMetric !== undefined && formattedMetric > 0){\n         console.log('\\r\\n  ' + formattedMetric + ' kRAD/s -> radian distance collisions performance metric -> proof of distance miner\\n\\r')\n       }\n    } else if(stats.length > 0) {\n       console.log('\\r\\n  ' + 'sampling radian distance performance <- ' + stats.length + '/5\\n\\r')\n    }\n  }, 11500)\n\n  globalLog.info('pool controller ready ' + process.pid)\n\n} else {\n  /**\n     * Miner woker entrypoin\n     */\n  process.title = 'bcworker'\n  const variableTimeout = 12000 + Math.floor(Math.random() * 10000)\n  setTimeout(() => {\n    globalLog.info('worker ' + process.pid + ' dismissed after ' + Math.floor(variableTimeout/1000) + 's')\n    process.exit()\n  }, variableTimeout)\n\n  const main = () => {\n\n    process.on('message', ({\n      workId,\n      currentTimestamp,\n      offset,\n      work,\n      minerKey,\n      merkleRoot,\n      newestChildBlock,\n      difficulty,\n      difficultyData\n    }) => {\n      globalLog.info('worker ' + process.pid + ' reporting in')\n\n      ts.offsetOverride(offset)\n      // Deserialize buffers from parent process, buffer will be serialized as object of this shape { <idx>: byte } - so use Object.values on it\n      const deserialize = (buffer: {\n                [string]: number\n            }, clazz: BcBlock | BlockchainHeader | BlockchainHeaders) => clazz.deserializeBinary(new Uint8Array(Object.values(buffer).map(n => parseInt(n, 10))))\n\n      // function with all difficultyData closed in scope and\n      // send it to mine with all arguments except of timestamp and use it\n      // each 1s tick with new timestamp\n      const difficultyCalculator = function () {\n        // Proto buffers are serialized - let's deserialize them\n        const {\n          lastPreviousBlock,\n          newBlockHeaders\n        } = difficultyData\n        const lastPreviousBlockProto = deserialize(lastPreviousBlock, BcBlock)\n        const newBlockHeadersProto = deserialize(newBlockHeaders, BlockchainHeaders)\n\n        // return function with scope closing all deserialized difficulty data\n        return function (timestamp: number) {\n          const newBlockCount = getNewBlockCount(lastPreviousBlockProto.getBlockchainHeaders(), newBlockHeadersProto)\n\n          const preExpDiff = getNewPreExpDifficulty(\n            timestamp,\n            lastPreviousBlockProto,\n            newestChildBlock,\n            newBlockCount\n          )\n          return getExpFactorDiff(preExpDiff, lastPreviousBlockProto.getHeight()).toString()\n        }\n      }\n\n      try {\n        const solution = mine(\n          currentTimestamp,\n          work,\n          minerKey,\n          merkleRoot,\n          difficulty,\n          difficultyCalculator()\n        )\n\n        process.send({\n          data: solution,\n          workId: workId\n        }, () => {\n          globalLog.info(`purposed candidate found: ${JSON.stringify(solution, null, 0)}`)\n          fkill('bcworker', { force: true })\n            .then(() => {\n              globalLog.info('global pool rebase success')\n            })\n            .catch((err) => {\n              globalLog.debug(err.message)\n            })\n        })\n      } catch (e) {\n        globalLog.warn(`mining failed with reason: ${e.message}, stack ${e.stack}`)\n        process.exit(3)\n      }\n    })\n  }\n\n  main()\n}\n"]}