{"version":3,"sources":["../../src/mining/primitives.es6"],"names":["getExpFactorDiff","getDiff","createMerkleRoot","split","dist","distance","distanceFromCache","mine","getParentShareDiff","getMinimumDifficulty","getNewPreExpDifficulty","prepareWork","getNewBlockCount","getChildBlockDiff","getUniqueHashes","getUniqueBlocks","prepareNewBlock","inspect","require","similarity","BN","Random","call","compose","difference","flip","groupBy","invoker","join","last","map","partialRight","reduce","repeat","reverse","splitEvery","toPairs","zip","zipWith","blake2bl","concatAll","Block","BcBlock","BcTransaction","BlockchainHeader","BlockchainHeaders","ts","default","GENESIS_DATA","MINIMUM_DIFFICULTY","MAX_TIMEOUT_SECONDS","BC_BT_VALIDATION","process","env","logging","logger","getLogger","__filename","calculatedDifficulty","parentBlockHeight","big1","big2","expDiffPeriod","periodCount","add","div","gt","y","sub","pow","currentBlockTime","previousBlockTime","previousDifficulty","minimalDifficulty","newBlockCount","newestChildHeader","bigMinimalDifficulty","newestChildBlock","undefined","Error","bigPreviousBlockTime","bigPreviousDifficulty","bigCurrentBlockTime","bigMinus99","big0","bigTargetTimeWindow","timestamp","toObject","bigChildHeaderTime","bigChildHeaderTimeBound","mul","elapsedTime","staleCost","elapsedTimeBonus","x","lt","list","prev","length","shift","t","an","charCodeAt","clbk","s","arguments","a","b","aChunks","bChunks","chunks","value","all","Math","floor","bchunkslength","ceil","len","min","i","tail","slice","currentTimestamp","work","miner","merkleRoot","threshold","difficultyCalculator","reportType","difficulty","difficultyBN","result","tsStart","now","maxCalculationEnd","workChunks","currentLoopTimestamp","iterations","res","nowms","nonce","String","abs","engines","nativeMath","toString","timeDiff","nonceHash","toHexBuffer","Buffer","hash","blockHash","getChildrenBlocksHashes","blockchainMapToList","headersMap","Object","keys","listName","getMethodName","toUpperCase","acc","curr","concat","getChildrenRootHash","xor","parentDifficulty","childChainCount","lastPreviousBlock","blockWhichTriggeredMining","preExpDiff","getTimestamp","getDifficulty","previousBlockHash","childrenCurrentBlocks","newChainRoot","copyHeader","block","confirmations","header","setBlockchain","getBlockchain","setHash","getHash","setPreviousHash","getPreviousHash","setTimestamp","setHeight","getHeight","setMerkleRoot","getMerkleRoot","setBlockchainConfirmationsInParentCount","prepareChildBlockHeadersMapForGenesis","currentBlockchainHeaders","newMap","forEach","blockchainHeader","methodNameSet","prepareChildBlockHeadersMap","previousBlock","newChildBlock","newChildHeaders","newChildHeadersMap","keyOrMethodToChain","keyOrMethod","replace","toLowerCase","chainToSet","chain","chainToGet","debug","blocks","depth","newBlockchainHeaders","listKey","newlyAssignedBlocks","lastHeaderFromPreviousBlock","getBlockchainHeaders","headerFromPreviousBlock","getBlockchainConfirmationsInParentCount","values","previousBlockHeaders","currentBlockHeaders","total","key","sa","sb","headersToHashes","headers","headerObj","previousHashes","info","currentHashes","diff","filterToDiff","filter","indexOf","newTransactions","minerAddress","unfinishedBlock","childBlockHeaders","height","blockHashes","finalDifficulty","heightIncrement","newHeight","newMerkleRoot","version","schemaVersion","nrgGrant","blockchainFingerprintsRoot","chainWeight","getDistance","divRound","newBlock","setVersion","setSchemaVersion","setMiner","setDifficulty","setChainRoot","setDistance","setTotalDistance","getTotalDistance","setNrgGrant","setTargetHash","targetHash","setTargetHeight","targetHeight","setTargetMiner","targetMiner","setTargetSignature","targetSignature","setTwn","twn","setTwsList","twsList","setEmblemWeight","emblemWeight","setEmblemChainBlockHash","emblemChainBlockHash","setEmblemChainFingerprintRoot","emblemChainFingerprintRoot","setEmblemChainAddress","emblemChainAddress","setTxCount","setTxsList","setBlockchainHeadersCount","setBlockchainFingerprintsRoot","setTxFeeBase","txFeeBase","setTxDistanceSumLimit","txDistanceSumLimit","setBlockchainHeaders"],"mappings":";;;;;QA6EgBA,gB,GAAAA,gB;QA+BAC,O,GAAAA,O;QAkFAC,gB,GAAAA,gB;QAqCAC,K,GAAAA,K;QASAC,I,GAAAA,I;QAiBAC,Q,GAAAA,Q;QAsBAC,iB,GAAAA,iB;QAkCAC,I,GAAAA,I;QAsGAC,kB,GAAAA,kB;QAIAC,oB,GAAAA,oB;QAMAC,sB,GAAAA,sB;QAyBAC,W,GAAAA,W;QAwFAC,gB,GAAAA,gB;QAaAC,iB,GAAAA,iB;QAgBAC,e,GAAAA,e;QAmBAC,e,GAAAA,e;QAgCAC,e,GAAAA,e;;;AA7kBhB,MAAM,EAAEC,OAAF,KAAcC,QAAQ,MAAR,CAApB,C,CAzBA;;;;;;;;;;AAUA;;;;;;;;;;;;;AAgBA,MAAMC,aAAaD,QAAQ,2BAAR,CAAnB;AACA,MAAME,KAAKF,QAAQ,OAAR,CAAX;AACA,MAAMG,SAASH,QAAQ,WAAR,CAAf;AACA,MAAM;AACJI,MADI;AAEJC,SAFI;AAGJC,YAHI;AAIJC,MAJI;AAKJC,SALI;AAMJC,SANI;AAOJC,MAPI;AAQJC,MARI;AASJC,KATI;AAUJ;AACAC,cAXI;AAYJC,QAZI;AAaJC,QAbI;AAcJC,SAdI;AAeJC,YAfI;AAgBJC,SAhBI;AAiBJC,KAjBI;AAkBJC;AAlBI,IAmBFpB,QAAQ,OAAR,CAnBJ;;AAqBA,MAAM,EAAEqB,QAAF,KAAerB,QAAQ,iBAAR,CAArB;AACA,MAAM,EAAEsB,SAAF,KAAgBtB,QAAQ,gBAAR,CAAtB;AACA,MAAM,EAAEuB,KAAF,EAASC,OAAT,EAAkBC,aAAlB,EAAiCC,gBAAjC,EAAmDC,iBAAnD,KAAyE3B,QAAQ,mBAAR,CAA/E;AACA,MAAM4B,KAAK5B,QAAQ,eAAR,EAAyB6B,OAApC,C,CAA4C;AAC5C,MAAMC,eAAe9B,QAAQ,mBAAR,CAArB;;AAEA;AACA,MAAM+B,qBAAqB,IAAI7B,EAAJ,CAAO,eAAP,CAA3B;AACA,MAAM8B,sBAAsB,EAA5B;AACA,MAAMC,mBAAmBC,QAAQC,GAAR,CAAYF,gBAAZ,KAAiC,MAA1D;;AAEA,MAAMG,UAAUpC,QAAQ,WAAR,CAAhB;AACA,MAAMqC,SAAiBD,QAAQE,SAAR,CAAkBC,UAAlB,CAAvB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AAOO,SAASzD,gBAAT,CAA2B0D,oBAA3B,EAAqDC,iBAArD,EAAoF;AACzF,QAAMC,OAAO,IAAIxC,EAAJ,CAAO,CAAP,CAAb;AACA,QAAMyC,OAAO,IAAIzC,EAAJ,CAAO,CAAP,CAAb;AACA,QAAM0C,gBAAgB,IAAI1C,EAAJ,CAAO,QAAP,CAAtB;;AAEA;AACA,MAAI2C,cAAc,IAAI3C,EAAJ,CAAOuC,iBAAP,EAA0BK,GAA1B,CAA8BJ,IAA9B,CAAlB;AACAG,gBAAcA,YAAYE,GAAZ,CAAgBH,aAAhB,CAAd;;AAEA;AACA,MAAIC,YAAYG,EAAZ,CAAeL,IAAf,MAAyB,IAA7B,EAAmC;AACjC;AACA,QAAIM,IAAIJ,YAAYK,GAAZ,CAAgBP,IAAhB,CAAR;AACAM,QAAIN,KAAKQ,GAAL,CAASF,CAAT,CAAJ;AACAT,2BAAuBA,qBAAqBM,GAArB,CAAyBG,CAAzB,CAAvB;AACA,WAAOT,oBAAP;AACD;AACD,SAAOA,oBAAP;AACD;;AAED;;;;;;;;;;;AAWO,SAASzD,OAAT,CAAkBqE,gBAAlB,EAA4CC,iBAA5C,EAAuEC,kBAAvE,EAAmGC,iBAAnG,EAA8HC,aAA9H,EAAqJC,iBAArJ,EAAmL;AACxL;;AAEA,MAAIC,uBAAuB,IAAIxD,EAAJ,CAAOqD,iBAAP,CAA3B;AACA,MAAII,mBAAmBF,iBAAvB;AACA,MAAID,kBAAkBI,SAAtB,EAAiC;AAC/B,UAAM,IAAIC,KAAJ,CAAU,gCAAV,CAAN;AACA;AACD;;AAED;;AAEA;AACA;;AAEA,QAAMC,uBAAuB,IAAI5D,EAAJ,CAAOmD,iBAAP,CAA7B;AACA,QAAMU,wBAAwB,IAAI7D,EAAJ,CAAOoD,kBAAP,CAA9B;AACA,QAAMU,sBAAsB,IAAI9D,EAAJ,CAAOkD,gBAAP,CAA5B;AACA,QAAMa,aAAa,IAAI/D,EAAJ,CAAO,CAAC,EAAR,CAAnB;AACA,QAAMwC,OAAO,IAAIxC,EAAJ,CAAO,CAAP,CAAb;AACA,QAAMgE,OAAO,IAAIhE,EAAJ,CAAO,CAAP,CAAb;AACA,QAAMiE,sBAAsB,IAAIjE,EAAJ,CAAO,CAAP,CAA5B;AACA,MAAGyD,iBAAiBS,SAAjB,KAA+BR,SAAlC,EAA4C;AAC1CD,uBAAmBF,kBAAkBY,QAAlB,EAAnB;AACD;AACD,QAAMC,qBAAqB,IAAIpE,EAAJ,CAAOyD,iBAAiBS,SAAxB,EAAmCrB,GAAnC,CAAuC,IAAI7C,EAAJ,CAAO,IAAP,CAAvC,CAA3B;AACA;AACA;AACA;AACA;;AAEA,QAAMqE,0BAA0B,IAAIrE,EAAJ,CAAOoE,kBAAP,EAA2BxB,GAA3B,CAA+B,IAAI5C,EAAJ,CAAOiE,mBAAP,EAA4BK,GAA5B,CAAgC,IAAItE,EAAJ,CAAO,CAAP,CAAhC,CAA/B,CAAhC;AACA,MAAIuE,cAAcT,oBAAoBd,GAApB,CAAwBY,oBAAxB,CAAlB;;AAEA,MAAIY,YAAY,IAAIxE,EAAJ,CAAO,IAAIA,EAAJ,CAAO8D,oBAAoBd,GAApB,CAAwBqB,uBAAxB,CAAP,EAAyDxB,GAAzD,CAA6D,IAAI7C,EAAJ,CAAOiE,mBAAP,CAA7D,CAAP,CAAhB;AACAM,gBAAcA,YAAYvB,GAAZ,CAAgBwB,SAAhB,CAAd;;AAEA;AACA;;AAEA;AACA,QAAMC,mBAAmBF,YAAY3B,GAAZ,CAAgB2B,YAAYvB,GAAZ,CAAgB,IAAIhD,EAAJ,CAAO,CAAP,CAAhB,EAA2BsE,GAA3B,CAA+B,IAAItE,EAAJ,CAAOsD,aAAP,CAA/B,CAAhB,CAAzB;AACA;;AAEA,MAAImB,iBAAiB3B,EAAjB,CAAoBkB,IAApB,CAAJ,EAA+B;AAC7BO,kBAAcE,gBAAd;AACD;;AAED;AACA,MAAIC,IAAIlC,KAAKQ,GAAL,CAAS,IAAIhD,EAAJ,CAAO,IAAIA,EAAJ,CAAOuE,WAAP,EAAoB1B,GAApB,CAAwBoB,mBAAxB,CAAP,CAAT,CAAR,CAjDwL,CAiDjH;AACvE,MAAIlB,CAAJ;;AAEA;AACA,MAAI2B,EAAEC,EAAF,CAAKZ,UAAL,CAAJ,EAAsB;AACpBW,QAAIX,UAAJ;AACD;;AAED;AACAhB,MAAIc,sBAAsBhB,GAAtB,CAA0B,IAAI7C,EAAJ,CAAO,GAAP,CAA1B,CAAJ;AACA;AACA0E,MAAIA,EAAEJ,GAAF,CAAMvB,CAAN,CAAJ;AACA;AACA2B,MAAIA,EAAE9B,GAAF,CAAMiB,qBAAN,CAAJ;;AAEA;AACA,MAAIa,EAAEC,EAAF,CAAKnB,oBAAL,CAAJ,EAAgC;AAC9B,WAAOA,oBAAP;AACD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,SAAOkB,CAAP;AACD;;AAEM,SAAS5F,gBAAT,CAA2B8F,IAA3B,EAA2CC,IAA3C,EAAkE;AACvE,MAAID,KAAKE,MAAL,GAAc,CAAlB,EAAqB;AACnB,QAAID,SAASnB,SAAb,EAAwB;AACtB;AACAmB,aAAO1D,SAAS0D,OAAOD,KAAKG,KAAL,EAAhB,CAAP;AACD,KAHD,MAGO;AACLF,aAAO1D,SAASyD,KAAKG,KAAL,EAAT,CAAP;AACD;AACD,WAAOjG,iBAAiB8F,IAAjB,EAAuBC,IAAvB,CAAP;AACD;AACD;AACA,SAAOA,IAAP;AACD;;AAED;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;AAKO,SAAS9F,KAAT,CAAgBiG,CAAhB,EAAqC;AAC1C,SAAOA,EAAEjG,KAAF,CAAQ,EAAR,EAAY2B,GAAZ,CAAgB,UAAUuE,EAAV,EAAc;AACnC,WAAOA,GAAGC,UAAH,CAAc,CAAd,CAAP;AACD,GAFM,CAAP;AAGD;;AAED;;;AAGO,SAASlG,IAAT,CAAe0F,CAAf,EAA4B3B,CAA5B,EAAyCoC,IAAzC,EAAkE;AACvE,MAAIC,CAAJ;AACA,MAAIC,UAAUP,MAAV,GAAmB,CAAvB,EAA0B;AACxBM,QAAIrF,WAAW2E,CAAX,EAAc3B,CAAd,EAAiBoC,IAAjB,CAAJ;AACD,GAFD,MAEO;AACLC,QAAIrF,WAAW2E,CAAX,EAAc3B,CAAd,CAAJ;AACD;AACD,SAAOqC,MAAM,IAAN,GAAa,IAAIA,CAAjB,GAAqBA,CAA5B;AACD;;AAED;;;;;;;AAOO,SAASnG,QAAT,CAAmBqG,CAAnB,EAA8BC,CAA9B,EAAiD;AACtD,QAAMC,UAAU1E,QAAQC,WAAW,EAAX,EAAehC,MAAMuG,CAAN,CAAf,CAAR,CAAhB;AACA,QAAMG,UAAU1E,WAAW,EAAX,EAAehC,MAAMwG,CAAN,CAAf,CAAhB;AACA,QAAMG,SAASzE,IAAIuE,OAAJ,EAAaC,OAAb,CAAf;;AAEA,QAAME,QAAQD,OAAO9E,MAAP,CAAc,UAAUgF,GAAV,EAAe,CAACN,CAAD,EAAIC,CAAJ,CAAf,EAAuB;AACjD,WAAOK,MAAM5G,KAAKuG,CAAL,EAAQD,CAAR,CAAb;AACD,GAFa,EAEX,CAFW,CAAd;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA,SAAOO,KAAKC,KAAL,CAAWH,QAAQ,gBAAnB,CAAP,CAfsD,CAeV;AAC7C;;AAED;;;;AAIO,SAASzG,iBAAT,CAA4BsG,OAA5B,EAA+CD,CAA/C,EAAkE;AACvE;AACA,QAAME,UAAU1G,MAAMwG,CAAN,CAAhB;;AAEA,QAAMQ,gBAAgBF,KAAKG,IAAL,CAAUP,QAAQX,MAAR,GAAe,EAAzB,CAAtB;AACA,MAAIa,QAAQ,CAAZ;AACA,QAAMM,MAAMJ,KAAKK,GAAL,CAASV,QAAQV,MAAjB,EAAwBiB,aAAxB,CAAZ;AACA,OAAI,IAAII,IAAI,CAAZ,EAAeA,IAAIF,GAAnB,EAAuBE,GAAvB,EAA4B;AAC1B,UAAMC,OAAOP,KAAKK,GAAL,CAAS,MAAIC,IAAE,CAAN,CAAT,EAAkBV,QAAQX,MAA1B,CAAb;AACAa,aAAS3G,KAAKyG,QAAQY,KAAR,CAAc,KAAGF,CAAjB,EAAoBC,IAApB,CAAL,EAAgCZ,QAAQW,CAAR,CAAhC,CAAT;AACD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,SAAON,KAAKC,KAAL,CAAWH,QAAQ,gBAAnB,CAAP;AACD;;AAGD;;;;;;;;;;;AAWA;AACO,SAASxG,IAAT,CAAemH,gBAAf,EAAyCC,IAAzC,EAAuDC,KAAvD,EAAsEC,UAAtE,EAA0FC,SAA1F,EAA6GC,oBAA7G,EAA8IC,UAA9I,EAA+O;AACpP,MAAIC,aAAaH,SAAjB;AACA,MAAII,eAAe,IAAI9G,EAAJ,CAAO6G,UAAP,CAAnB;AACA,MAAIE,MAAJ;AACA,QAAMC,UAAUtF,GAAGuF,GAAH,EAAhB;AACA,QAAMC,oBAAoBF,UAAWlF,sBAAsB,IAA3D;AACA,QAAMqF,aAAarG,QAAQC,WAAW,EAAX,EAAehC,MAAMwH,IAAN,CAAf,CAAR,CAAnB;AACA,MAAIa,uBAAuBd,gBAA3B;AACA,MAAIe,aAAa,CAAjB;AACA,MAAIC,MAAM,IAAV;AACA,MAAIC,QAAQ,CAAZ;AACA,MAAIN,MAAM,CAAV;AACA,MAAIO,QAAQC,OAAO5B,KAAK6B,GAAL,CAASzH,OAAO0H,OAAP,CAAeC,UAAf,EAAT,CAAP,CAAZ;AACA,SAAO,IAAP,EAAa;AACXP,kBAAc,CAAd;;AAEFE,YAAQ7F,GAAGuF,GAAH,EAAR;AACAA,UAAOM,QAAM,IAAP,IAAc,CAApB;;AAEE,QAAIL,oBAAoBK,KAAxB,EAA+B;AAC7B;AACD;;AAED,QAAI,IAAIvH,EAAJ,CAAO+G,MAAP,EAAejE,EAAf,CAAkBgE,YAAlB,MAAoC,IAAxC,EAA8C;AAC5CQ,YAAM;AACJrI,kBAAW8H,MAAD,CAASc,QAAT,EADN;AAEJL,aAFI;AAGJtD,mBAAWkD,oBAHP;AAIJP,kBAJI;AAKJ;AACAQ,kBANI;AAOJS,kBAAUP,QAAQP;AAPd,OAAN;AASA;AACD;AACD;AACA,QAAIL,wBAAwBS,uBAAuBH,GAAnD,EAAwD;AACtDG,6BAAuBH,GAAvB;AACAJ,mBAAaF,qBAAqBM,GAArB,CAAb;AACAH,qBAAe,IAAI9G,EAAJ,CAAO6G,UAAP,CAAf;AACD;AACDW,YAAQC,OAAO5B,KAAK6B,GAAL,CAASzH,OAAO0H,OAAP,CAAeC,UAAf,EAAT,CAAP,CAAR;AACA,UAAMG,YAAY5G,SAASqG,KAAT,CAAlB;AACAT,aAAS7H,kBAAkBiI,UAAlB,EAA8BhG,SAASqF,QAAQC,UAAR,GAAqBsB,SAArB,GAAiCX,oBAA1C,CAA9B,CAAT;AACD;;AAED;AACA;AACA;AACA;AACA;;AAEA,SAAOE,GAAP;AACD;;AAED;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;AASA,MAAMU,cAAoCrH,aAAaJ,QAAQ,CAAR,EAAW,MAAX,CAAb,EAAiC,CAAC,KAAD,EAAQ0H,MAAR,CAAjC,CAA1C;AACA,MAAMC,OAA6C3H,QAAQ,CAAR,EAAW,SAAX,CAAnD;AACA,MAAMkG,aAAmDlG,QAAQ,CAAR,EAAW,eAAX,CAAzD;;AAEA;;;;;AAKA,MAAM4H,YAAgDhI,QACpDgB,QADoD,EAEpDX,KAAK,EAAL,CAFoD,EAGpDU,QAAQhB,IAAR,EAAc,CAACgI,IAAD,EAAOzB,UAAP,CAAd,CAHoD,EAIpDpG,KAAKQ,MAAL,EAAa,CAAb,CAJoD,CAAtD;;AAOO,MAAMuH,4DAAsE1H,IAAIyH,SAAJ,CAA5E;;AAEP;AACO,MAAME,oDAAuBC,UAAD,IAAuD;AACxF,SAAOC,OAAOC,IAAP,CAAYF,WAAWnE,QAAX,EAAZ,EAAmCzD,GAAnC,CAAuC+H,YAAY;AACxD,UAAMC,gBAAiB,MAAKD,SAAS,CAAT,EAAYE,WAAZ,EAA0B,GAAEF,SAASpC,KAAT,CAAe,CAAf,CAAkB,EAA1E;AACA,WAAOiC,WAAWI,aAAX,GAAP;AACD,GAHM,EAGJ9H,MAHI,CAGG,CAACgI,GAAD,EAAMC,IAAN,KAAe;AACvB,WAAOD,IAAIE,MAAJ,CAAWD,IAAX,CAAP;AACD,GALM,EAKJ,EALI,CAAP;AAMD,CAPM;;AASA,MAAME,oDAAsBnI,OAAO,CAACgF,GAAD,EAAUuC,SAAV,KAAgC;AACxE,SAAOvC,IAAIoD,GAAJ,CAAQ,IAAIhJ,EAAJ,CAAOgI,YAAYG,SAAZ,CAAP,CAAR,CAAP;AACD,CAFkC,EAEhC,IAAInI,EAAJ,CAAO,CAAP,CAFgC,CAA5B;;AAIA,SAASZ,kBAAT,CAA6B6J,gBAA7B,EAAuDC,eAAvD,EAAoF;AACzF,SAAQ,IAAIlJ,EAAJ,CAAOiJ,gBAAP,CAAD,CAA2BpG,GAA3B,CAA+B,IAAI7C,EAAJ,CAAOkJ,eAAP,CAA/B,CAAP;AACD;;AAEM,SAAS7J,oBAAT,CAA+B6J,eAA/B,EAA4D;AACjE;AACA,SAAOrH,mBAAmBgB,GAAnB,CAAuB,IAAI7C,EAAJ,CAAOkJ,eAAP,CAAvB,CAAP;AACD;;AAED;AACO,SAAS5J,sBAAT,CACLgH,gBADK,EAEL6C,iBAFK,EAGLC,yBAHK,EAIL9F,aAJK,EAKL;AACA,QAAM+F,aAAaxK,QACjByH,gBADiB,EAEjB6C,kBAAkBG,YAAlB,EAFiB,EAGjBH,kBAAkBI,aAAlB,EAHiB,EAIjB1H,kBAJiB,EAKjByB,aALiB,EAMjB8F,yBANiB,CAMS;AANT,GAAnB,CADA,CAQE;;AAEF,SAAOC,UAAP;AACD;;AAED;;;;;;;AAOO,SAAS9J,WAAT,CAAsBiK,iBAAtB,EAAiDC,qBAAjD,EAAmG;AACxG,QAAMC,eAAeX,oBAAoBX,wBAAwBC,oBAAoBoB,qBAApB,CAAxB,CAApB,CAArB;AACA,QAAMlD,OAAOpF,SACXuI,aAAaV,GAAb,CACE,IAAIhJ,EAAJ,CACEgI,YAAYwB,iBAAZ,CADF,CADF,EAIE3B,QAJF,EADW,CAAb;;AAQA,SAAOtB,IAAP;AACD;;AAED,MAAMoD,aAAa,CAACC,KAAD,EAAgCC,aAAhC,KAA4E;AAC7F,QAAMC,SAAS,IAAItI,gBAAJ,EAAf;AACAsI,SAAOC,aAAP,CAAqBH,MAAMI,aAAN,EAArB;AACAF,SAAOG,OAAP,CAAeL,MAAMM,OAAN,EAAf;AACAJ,SAAOK,eAAP,CAAuBP,MAAMQ,eAAN,EAAvB;AACAN,SAAOO,YAAP,CAAoBT,MAAMN,YAAN,EAApB;AACAQ,SAAOQ,SAAP,CAAiBV,MAAMW,SAAN,EAAjB;AACAT,SAAOU,aAAP,CAAqBZ,MAAMa,aAAN,EAArB;AACAX,SAAOY,uCAAP,CAA+Cb,aAA/C;AACA,SAAOC,MAAP;AACD,CAVD;;AAYA,SAASa,qCAAT,CAAgDC,wBAAhD,EAAsG;AACpG,QAAMC,SAAS,IAAIpJ,iBAAJ,EAAf;AACAmJ,2BAAyBE,OAAzB,CAAiChB,UAAU;AACzC,UAAMiB,mBAAmBpB,WAAWG,MAAX,EAAmB,CAAnB,CAAzB;AACA,UAAMkB,gBAAiB,MAAKlB,OAAOE,aAAP,GAAuB,CAAvB,EAA0BrB,WAA1B,KAA0CmB,OAAOE,aAAP,GAAuB3D,KAAvB,CAA6B,CAA7B,CAAgC,MAAtG,CAFyC,CAEmE;AAC5GwE,WAAOG,aAAP,EAAsB,CAACD,gBAAD,CAAtB;AACD,GAJD;AAKA,SAAOF,MAAP;AACD;;AAED;;;;;;;;;;;;;AAaA,SAASI,2BAAT,CAAsCC,aAAtC,EAA8DC,aAA9D,EAAoFC,eAApF,EAAiI;AAC/H,QAAMC,qBAAqB/K,QAAQsJ,SAASA,MAAMI,aAAN,EAAjB,EAAwCoB,eAAxC,CAA3B;;AAEA,QAAME,qBAAsBC,WAAD,IAAyBA,YAAYC,OAAZ,CAAoB,UAApB,EAAgC,EAAhC,EAAoCA,OAApC,CAA4C,OAA5C,EAAqD,EAArD,EAAyDC,WAAzD,EAApD;AACA,QAAMC,aAAcC,KAAD,IAAoB,MAAKA,MAAM,CAAN,EAAShD,WAAT,KAAyBgD,MAAMtF,KAAN,CAAY,CAAZ,CAAe,MAApF;AACA,QAAMuF,aAAcD,KAAD,IAAoB,MAAKA,MAAM,CAAN,EAAShD,WAAT,KAAyBgD,MAAMtF,KAAN,CAAY,CAAZ,CAAe,MAApF;;AAEAlE,SAAO0J,KAAP,CAAc,uBAAsBhM,QAAQmB,QAAQqK,kBAAR,EAA4B3K,GAA5B,CAAgC,CAAC,CAACiL,KAAD,EAAQG,MAAR,CAAD,KAAqB;AAC/F,WAAO,YAAYH,KAAZ,GAAoB,WAApB,GAAkC9L,QAAQiM,OAAOpL,GAAP,CAAWkJ,SAASD,WAAWC,KAAX,EAAkB,CAAlB,EAAqBzF,QAArB,EAApB,CAAR,CAAzC;AACD,GAF2C,CAAR,EAEhC,EAAC4H,OAAO,CAAR,EAFgC,CAEpB,EAFhB;;AAIA,QAAMC,uBAAuB,IAAIvK,iBAAJ,EAA7B;AACA;AACAT,UAAQqK,kBAAR,EAA4BP,OAA5B,CAAoC,CAAC,CAACa,KAAD,EAAQG,MAAR,CAAD,KAAqB;AACvDE,yBAAqBN,WAAWC,KAAX,CAArB,EAAwCG,OAAOpL,GAAP,CAAWkJ,SAASD,WAAWC,KAAX,EAAkB,CAAlB,CAApB,CAAxC;AACD,GAFD;;AAIA;AACArB,SAAOC,IAAP,CAAYwD,qBAAqB7H,QAArB,EAAZ,EAA6C2G,OAA7C,CAAqDmB,WAAW;AAC9D,UAAMN,QAAQL,mBAAmBW,OAAnB,CAAd;AACA,UAAMC,sBAAsBF,qBAAqBJ,WAAWD,KAAX,CAArB,GAA5B;AACAxJ,WAAO0J,KAAP,CAAc,oCAAmCD,WAAWD,KAAX,CAAkB,KAAIO,oBAAoBxL,GAApB,CAAwB6E,KAAKA,EAAEpB,QAAF,EAA7B,CAA2C,EAAlH;AACA,QAAI+H,oBAAoBpH,MAApB,KAA+B,CAAnC,EAAsC;AACpC,YAAMqH,8BAA8B1L,KAAKyK,cAAckB,oBAAd,GAAqCR,WAAWD,KAAX,CAArC,GAAL,CAApC;AACA,UAAI,CAACQ,2BAAL,EAAkC;AAChC,cAAM,IAAIxI,KAAJ,CAAW,qBAAoBuH,cAAcX,SAAd,EAA0B,uBAAsBoB,KAAM,WAArF,CAAN;AACD;AACD,YAAMU,0BAA0B1C,WAAWwC,2BAAX,EAAwCA,4BAA4BG,uCAA5B,KAAwE,CAAhH,CAAhC;AACAN,2BAAqBN,WAAWC,KAAX,CAArB,EAAwC,CAACU,uBAAD,CAAxC;AACD;AACF,GAZD;;AAcAlK,SAAO0J,KAAP,CAAc,mDAAkDX,cAAcX,SAAd,EAA0B,mBAAkB1K,QAAQ0I,OAAOgE,MAAP,CAAcP,qBAAqB7H,QAArB,EAAd,CAAR,EAAwD,EAAC4H,OAAO,CAAR,EAAxD,CAAoE,EAAhL;;AAEA,SAAOC,oBAAP;AACD;;AAED;;;AAGO,SAASxM,gBAAT,CAA2BgN,oBAA3B,EAAoEC,mBAApE,EAA4G;AACjH;AACA,SAAOhN,kBAAkB+M,oBAAlB,EAAwCC,mBAAxC,CAAP;AACA;AACA;AACA;;AAEA;AACD;;AAED;;;AAGO,SAAShN,iBAAT,CAA4B+M,oBAA5B,EAAqEC,mBAArE,EAA6G;AAClH;AACA,QAAMnH,IAAIkH,qBAAqBrI,QAArB,EAAV;AACA,QAAMoB,IAAIkH,oBAAoBtI,QAApB,EAAV;;AAEA,SAAOoE,OAAOC,IAAP,CAAYjD,CAAZ,EAAe3E,MAAf,CAAsB,CAAC8L,KAAD,EAAQC,GAAR,KAAgB;AAC3C,UAAMC,KAAKtH,EAAEqH,GAAF,EAAOjM,GAAP,CAAYoJ,MAAD,IAAY;AAAE,aAAOA,OAAO5B,IAAd;AAAoB,KAA7C,CAAX;AACA,UAAM2E,KAAKtH,EAAEoH,GAAF,EAAOjM,GAAP,CAAYoJ,MAAD,IAAY;AAAE,aAAOA,OAAO5B,IAAd;AAAoB,KAA7C,CAAX;AACAwE,YAAQA,QAAQtM,WAAWwM,EAAX,EAAeC,EAAf,EAAmB/H,MAAnC;AACA,WAAO4H,KAAP;AACD,GALM,EAKJ,CALI,CAAP;AAMD;;AAED;;;AAGO,SAAShN,eAAT,CAA0B8M,oBAA1B,EAAmEC,mBAAnE,EAA2G;AAChH;AACA,QAAMK,kBAAmBC,OAAD,IAAgCxE,OAAOgE,MAAP,CAAcC,qBAAqBrI,QAArB,EAAd,EAA+CvD,MAA/C,CAAsD,CAACgI,GAAD,EAAMC,IAAN,KAAeD,IAAIE,MAAJ,CAAWD,IAAX,CAArE,EAAuF,EAAvF,EAA2FnI,GAA3F,CAA+FsM,aAAaA,UAAU9E,IAAtH,CAAxD;AACA,QAAM+E,iBAAiBH,gBAAgBN,oBAAhB,CAAvB;AACArK,SAAO+K,IAAP,CAAY,qBAAqBD,cAAjC;AACA,QAAME,gBAAgBL,gBAAgBL,mBAAhB,CAAtB;AACAtK,SAAO+K,IAAP,CAAY,oBAAoBC,aAAhC;;AAEA,SAAO/M,WAAW+M,aAAX,EAA0BF,cAA1B,CAAP;AACA;AACA;AACA;AACA;AACA;AACD;;AAED;;;AAGO,SAAStN,eAAT,CAA0B6M,oBAA1B,EAAmEC,mBAAnE,EAA2G;AAChH;AACA,QAAMK,kBAAmBC,OAAD,IAAgCxE,OAAOgE,MAAP,CAAcC,qBAAqBrI,QAArB,EAAd,EAA+CvD,MAA/C,CAAsD,CAACgI,GAAD,EAAMC,IAAN,KAAeD,IAAIE,MAAJ,CAAWD,IAAX,CAArE,EAAuF,EAAvF,EAA2FnI,GAA3F,CAA+FsM,aAAaA,UAAU9E,IAAtH,CAAxD;AACA,QAAM+E,iBAAiBH,gBAAgBN,oBAAhB,CAAvB;AACA,QAAMW,gBAAgBL,gBAAgBL,mBAAhB,CAAtB;AACA,QAAMW,OAAOhN,WAAW+M,aAAX,EAA0BF,cAA1B,CAAb;;AAEA,QAAMI,eAAeZ,oBAAoBa,MAApB,CAA4B/H,CAAD,IAAO;AACrD,QAAI6H,KAAKG,OAAL,CAAahI,EAAE2E,OAAF,EAAb,IAA4B,CAAC,CAAjC,EAAoC;AAClC,aAAO3E,CAAP;AACD;AACF,GAJoB,CAArB;AAKA,SAAO8H,YAAP;AACD;;AAED;;;;;;;;;;;;;;;;;AAiBO,SAASzN,eAAT,CAA0B0G,gBAA1B,EAAoD6C,iBAApD,EAAgFiC,eAAhF,EAA0GhC,yBAA1G,EAA4IoE,eAA5I,EAA8KC,YAA9K,EAAoMC,eAApM,EAAkP;;AAGvP,MAAIC,iBAAJ;AACA,MAAIxE,sBAAsBzF,SAAtB,IAAmCyF,kBAAkBoB,SAAlB,OAAkC3I,aAAagM,MAAtF,EAA8F;AAC5FD,wBAAoBhD,sCAAsCS,eAAtC,CAApB;AACD,GAFD,MAEO;AACLuC,wBAAoB1C,4BAClByC,mBAAmBvE,iBADD,EAElBC,yBAFkB,EAGlBgC,eAHkB,CAApB;AAKD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMyC,cAAczF,wBAAwBC,oBAAoBsF,iBAApB,CAAxB,CAApB;AACA,QAAMjE,eAAeX,oBAAoB8E,WAApB,CAArB;AACA,QAAMvK,gBAAgB9D,iBAAiB2J,kBAAkBiD,oBAAlB,EAAjB,EAA2DuB,iBAA3D,CAAtB;AACA;;AAEA;AACA;AACA;;AAEA,QAAMtE,aAAa/J,uBACjBgH,gBADiB,EAEjB6C,iBAFiB,EAGjBC,yBAHiB,EAIjB9F,aAJiB,CAAnB;;AAOA;AACA,QAAMwK,kBAAkBlP,iBAAiByK,UAAjB,EAA6BF,kBAAkBoB,SAAlB,EAA7B,EAA4D1C,QAA5D,EAAxB;;AAEA,MAAIkG,kBAAkB,CAAtB;AACA,MAAGhM,qBAAqB,IAArB,IAA6B,IAAI/B,EAAJ,CAAOmJ,kBAAkBoB,SAAlB,EAAP,EAAsC5F,EAAtC,CAAyC,IAAI3E,EAAJ,CAAO,CAAP,CAAzC,MAAwD,IAAxF,EAA8F;AAC5F+N,sBAAkB,MAAlB;AACD;;AAED,QAAMC,YAAY7E,kBAAkBoB,SAAlB,KAAgCwD,eAAlD;AACA;AACA;AACA,QAAME,gBAAgBnP,iBAAiBsC,UAAU,CAC/CyM,WAD+C,EAE/CL,eAF+C,EAG/C,CACEM,eADF,EAEEL,YAFF,EAGEO,SAHF,EAIEpM,aAAasM,OAJf,EAKEtM,aAAauM,aALf,EAMEvM,aAAawM,QANf,EAOExM,aAAayM,0BAPf,CAH+C,CAAV,CAAjB,CAAtB;;AAcA,MAAIC,cAAc,CAAlB;AACA,MAAI,IAAItO,EAAJ,CAAOmJ,kBAAkBoB,SAAlB,EAAP,EAAsCzH,EAAtC,CAAyC,CAAzC,MAAgD,IAApD,EAA0D;AACxDwL,kBAAc,IAAItO,EAAJ,CAAOmJ,kBAAkBoF,WAAlB,EAAP,EAAwCvL,GAAxC,CAA4C,IAAIhD,EAAJ,CAAOmJ,kBAAkBI,aAAlB,EAAP,CAA5C,EAAuFiF,QAAvF,CAAgG,IAAIxO,EAAJ,CAAO,CAAP,CAAhG,EAA2G6H,QAA3G,EAAd;AACD;;AAED,QAAM4G,WAAW,IAAInN,OAAJ,EAAjB;AACAmN,WAASxE,OAAT,CAAiB9I,SAASgI,kBAAkBe,OAAlB,KAA8B+D,aAAvC,CAAjB;AACAQ,WAAStE,eAAT,CAAyBhB,kBAAkBe,OAAlB,EAAzB;AACAuE,WAASC,UAAT,CAAoB,CAApB;AACAD,WAASE,gBAAT,CAA0B,CAA1B;AACAF,WAASnE,SAAT,CAAmB0D,SAAnB;AACAS,WAASG,QAAT,CAAkBnB,YAAlB;AACAgB,WAASI,aAAT,CAAuBf,eAAvB;AACAW,WAASjE,aAAT,CAAuByD,aAAvB;AACAQ,WAASK,YAAT,CAAsB3N,SAASuI,aAAa7B,QAAb,EAAT,CAAtB;AACA4G,WAASM,WAAT,CAAqBT,WAArB,EA9EuP,CA8ErN;AAClCG,WAASO,gBAAT,CAA0B7F,kBAAkB8F,gBAAlB,EAA1B,EA/EuP,CA+EvL;AAChER,WAASS,WAAT,CAAqBtN,aAAawM,QAAlC;AACAK,WAASU,aAAT,CAAuBvN,aAAawN,UAApC;AACAX,WAASY,eAAT,CAAyBzN,aAAa0N,YAAtC;AACAb,WAASc,cAAT,CAAwB3N,aAAa4N,WAArC;AACAf,WAASgB,kBAAT,CAA4B7N,aAAa8N,eAAzC;AACAjB,WAASkB,MAAT,CAAgB/N,aAAagO,GAA7B,EArFuP,CAqFrN;AAClCnB,WAASoB,UAAT,CAAoBjO,aAAakO,OAAjC,EAtFuP,CAsF7M;AAC1CrB,WAASsB,eAAT,CAAyBnO,aAAaoO,YAAtC;AACAvB,WAASwB,uBAAT,CAAiCrO,aAAasO,oBAA9C;AACAzB,WAAS0B,6BAAT,CAAuCvO,aAAawO,0BAApD;AACA3B,WAAS4B,qBAAT,CAA+BzO,aAAa0O,kBAA5C;AACA7B,WAAS8B,UAAT,CAAoB,CAApB;AACA9B,WAAS+B,UAAT,CAAoBhD,eAApB;AACAiB,WAASgC,yBAAT,CAAmCrF,gBAAgBtG,MAAnD;AACA2J,WAASiC,6BAAT,CAAuC9O,aAAayM,0BAApD;AACAI,WAASkC,YAAT,CAAsB/O,aAAagP,SAAnC;AACAnC,WAASoC,qBAAT,CAA+BjP,aAAakP,kBAA5C;AACArC,WAASsC,oBAAT,CAA8BpD,iBAA9B;;AAEA;AACAxL,SAAO+K,IAAP,CAAY,8CAA8CuB,SAASlF,aAAT,EAA1D;;AAEA,SAAO,CAACkF,QAAD,EAAWnI,gBAAX,CAAP;AACD","file":"primitives.js","sourcesContent":["/**\n * Copyright (c) 2017-present, blockcollider.org developers, All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * TODO: Fix flow issues\n * @flow\n */\n\n/**\n *    DOCUMENT IN FOUR PARTS\n *\n *      PART 1: Difficulty of the next block [COMPLETE]\n *\n *      PART 2: Mining a block hash [COMPLETE]\n *\n *      PART 3: Blockchain header proofs [IN PROGRESS]\n *\n *      PART 4: Create Block Collider Block Hash  [COMPLETE]\n *\n */\n\nimport type { Logger } from 'winston'\n\nconst { inspect } = require('util')\nconst similarity = require('compute-cosine-similarity')\nconst BN = require('bn.js')\nconst Random = require('random-js')\nconst {\n  call,\n  compose,\n  difference,\n  flip,\n  groupBy,\n  invoker,\n  join,\n  last,\n  map,\n  // $FlowFixMe - missing in ramda flow-typed annotation\n  partialRight,\n  reduce,\n  repeat,\n  reverse,\n  splitEvery,\n  toPairs,\n  zip,\n  zipWith\n} = require('ramda')\n\nconst { blake2bl } = require('../utils/crypto')\nconst { concatAll } = require('../utils/ramda')\nconst { Block, BcBlock, BcTransaction, BlockchainHeader, BlockchainHeaders } = require('../protos/core_pb')\nconst ts = require('../utils/time').default // ES6 default export\nconst GENESIS_DATA = require('../bc/genesis.raw')\n\n// testnet: 11801972029393\nconst MINIMUM_DIFFICULTY = new BN(290112262029012)\nconst MAX_TIMEOUT_SECONDS = 45\nconst BC_BT_VALIDATION = process.env.BC_BT_VALIDATION === 'true'\n\nconst logging = require('../logger')\nconst logger: Logger = logging.getLogger(__filename)\n\n/// /////////////////////////////////////////////////////////////////////\n/// ////////////////////////\n/// ////////////////////////  PART 1  - Dificulty of the next block\n/// ////////////////////////\n/// /////////////////////////////////////////////////////////////////////\n\n/**\n * Determines the singularity height and difficulty\n *\n * @param calculatedDifficulty\n * @param parentBlockHeight\n * @returns a\n */\nexport function getExpFactorDiff (calculatedDifficulty: BN, parentBlockHeight: number): BN {\n  const big1 = new BN(1)\n  const big2 = new BN(2)\n  const expDiffPeriod = new BN(66000000)\n\n  // periodCount = (parentBlockHeight + 1) / 66000000\n  let periodCount = new BN(parentBlockHeight).add(big1)\n  periodCount = periodCount.div(expDiffPeriod)\n\n  // if (periodCount > 2)\n  if (periodCount.gt(big2) === true) {\n    // return calculatedDifficulty + (2 ^ (periodCount - 2))\n    let y = periodCount.sub(big2)\n    y = big2.pow(y)\n    calculatedDifficulty = calculatedDifficulty.add(y)\n    return calculatedDifficulty\n  }\n  return calculatedDifficulty\n}\n\n/**\n * FUNCTION: getDiff(t)\n *   Gets the difficulty of a given blockchain without singularity calculation\n *\n * @param currentBlockTime\n * @param previousBlockTime\n * @param previousDifficulty\n * @param minimalDifficulty\n * @param newBlockCount\n * @returns\n */\nexport function getDiff (currentBlockTime: number, previousBlockTime: number, previousDifficulty: string, minimalDifficulty: number, newBlockCount: number, newestChildHeader: Block): BN {\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-2.md\n\n  let bigMinimalDifficulty = new BN(minimalDifficulty)\n  let newestChildBlock = newestChildHeader\n  if (newBlockCount === undefined) {\n    throw new Error('new block count is not defined')\n    // return false\n  }\n\n  /* eslint-disable */\n\n  //logger.info('\\n\\n\\n\\n------- CHILD HEADER --------\\n')\n  //console.log(newestChildHeader)\n\n  const bigPreviousBlockTime = new BN(previousBlockTime)\n  const bigPreviousDifficulty = new BN(previousDifficulty)\n  const bigCurrentBlockTime = new BN(currentBlockTime)\n  const bigMinus99 = new BN(-99)\n  const big1 = new BN(1)\n  const big0 = new BN(0)\n  const bigTargetTimeWindow = new BN(8)\n  if(newestChildBlock.timestamp === undefined){\n    newestChildBlock = newestChildHeader.toObject()\n  }\n  const bigChildHeaderTime = new BN(newestChildBlock.timestamp).div(new BN(1000))\n  //console.log('----------------------------- currentBlockTime: ' + currentBlockTime)\n  //console.log('----------------------------- previousBlockTime: ' + previousBlockTime)\n  //console.log('----------------------------- newBlockCount: ' + newBlockCount)\n  //console.log('----------------------------- bigChildHeaderTime: ' + bigChildHeaderTime)\n\n  const bigChildHeaderTimeBound = new BN(bigChildHeaderTime).add(new BN(bigTargetTimeWindow).mul(new BN(2)))\n  let elapsedTime = bigCurrentBlockTime.sub(bigPreviousBlockTime)\n\n  let staleCost = new BN(new BN(bigCurrentBlockTime.sub(bigChildHeaderTimeBound)).div(new BN(bigTargetTimeWindow)))\n  elapsedTime = elapsedTime.sub(staleCost)\n\n  // console.log('staleCost: ' + staleCost.toNumber())\n  // console.log('(after) elapsedTime: ' + elapsedTime.toNumber())\n\n  // elapsedTime + ((elapsedTime - 5) * newBlocks)\n  const elapsedTimeBonus = elapsedTime.add(elapsedTime.sub(new BN(6)).mul(new BN(newBlockCount)))\n  // console.log('time bonus  ' + elapsedTimeBonus.toNumber())\n\n  if (elapsedTimeBonus.gt(big0)) {\n    elapsedTime = elapsedTimeBonus\n  }\n\n  // x = 1 - floor(x / handicap)\n  let x = big1.sub(new BN(new BN(elapsedTime).div(bigTargetTimeWindow))) // div floors by default\n  let y\n\n  // x < -99 ? -99 : x\n  if (x.lt(bigMinus99)) {\n    x = bigMinus99\n  }\n\n  // y = bigPreviousDifficulty -> SPECTRUM: 10062600 // AT: 1615520 // BT: ((32 * 16) / 2PI ) * 10 = 815 chain count + hidden chain = 508\n  y = bigPreviousDifficulty.div(new BN(815))\n  // x = x * y\n  x = x.mul(y)\n  // x = x + previousDifficulty\n  x = x.add(bigPreviousDifficulty)\n\n  // x < minimalDifficulty\n  if (x.lt(bigMinimalDifficulty)) {\n    return bigMinimalDifficulty\n  }\n\n  //if(new BN(bigPreviousDifficulty).lt(new BN(x)) === true){\n  //  console.log('difficulty is increasing ' + new BN(x).sub(new BN(bigPreviousDifficulty)))\n  //} else if(new BN(bigPreviousDifficulty).gt(new BN(x)) === true){\n  //  console.log('difficulty is decreasing ' + new BN(x).sub(new BN(bigPreviousDifficulty)))\n  //} else {\n  //  console.log('difficulty is constant ' + new BN(x).sub(new BN(bigPreviousDifficulty)))\n  //}\n\n  //console.log(\"\\n\\n\")\n\n  return x\n}\n\nexport function createMerkleRoot (list: string[], prev: ?string): string {\n  if (list.length > 0) {\n    if (prev !== undefined) {\n      // $FlowFixMe\n      prev = blake2bl(prev + list.shift())\n    } else {\n      prev = blake2bl(list.shift())\n    }\n    return createMerkleRoot(list, prev)\n  }\n  // $FlowFixMe\n  return prev\n}\n\n/// /////////////////////////////////////////////////////////////////////\n/// ////////////////////////\n/// ////////////////////////  PART 2 - Mining a Block\n/// ////////////////////////\n/// /////////////////////////////////////////////////////////////////////\n\n/**\n * The Blake2BL hash of the proof of a block\n */\n// const blockProofs = [\n//   '9b80fc5cba6238801d745ca139ec639924d27ed004c22609d6d9409f1221b8ce', // BTC\n//   '781ff33f4d7d36b3f599d8125fd74ed37e2a1564ddc3f06fb22e1b0bf668a4f7', // ETH\n//   'e0f0d5bc8d1fd6d98fc6d1487a2d59b5ed406940cbd33f2f5f065a2594ff4c48', // LSK\n//   'ef631e3582896d9eb9c9477fb09bf8d189afd9bae8f5a577c2107fd0760b022e', // WAV\n//   'e2d5d4f3536cdfa49953fb4a96aa3b4a64fd40c157f1b3c69fb84b3e1693feb0', // NEO\n//   '1f591769bc88e2307d207fc4ee5d519cd3c03e365fa16bf5f63f449b46d6cdef' // EMB (Block Collider)\n// ]\n\n/**\n *  Converts characters of string into ASCII codes\n *\n * @returns {Number|Array}\n */\nexport function split (t: string): number[] {\n  return t.split('').map(function (an) {\n    return an.charCodeAt(0)\n  })\n}\n\n/**\n * Converts cosine similary to cos distance\n */\nexport function dist (x: number[], y: number[], clbk: ?Function): number {\n  let s\n  if (arguments.length > 2) {\n    s = similarity(x, y, clbk)\n  } else {\n    s = similarity(x, y)\n  }\n  return s !== null ? 1 - s : s\n}\n\n/**\n * [DEPRICATED] Returns summed distances between two strings broken into of 8 bits\n *\n * @param {string} a\n * @param {string} b\n * @returns {number} cosine distance between two strings\n */\nexport function distance (a: string, b: string): number {\n  const aChunks = reverse(splitEvery(32, split(a)))\n  const bChunks = splitEvery(32, split(b))\n  const chunks = zip(aChunks, bChunks)\n\n  const value = chunks.reduce(function (all, [a, b]) {\n    return all + dist(b, a)\n  }, 0)\n\n  // TODO this is the previous implementation - because of\n  // ac.pop() we need to reverse(aChunks) to produce same number\n  // is that correct or just side-effect?\n  // const value = bc.reduce(function (all, bd, i) {\n  //   return all + dist(bd, ac.pop())\n  // }, 0)\n  return Math.floor(value * 1000000000000000) // TODO: Move to safe MATH\n}\n\n/**\n * Returns distances between string chunks and a string proposed by @lgray\n * @returns {number} cosine distance between two strings\n */\nexport function distanceFromCache (aChunks: string[], b: string): number {\n  //const aChunks = reverse(splitEvery(32, split(a)))\n  const bChunks = split(b)\n\n  const bchunkslength = Math.ceil(bChunks.length/32)\n  let value = 0\n  const len = Math.min(aChunks.length,bchunkslength)\n  for(var i = 0; i < len;i++) {\n    const tail = Math.min(32*(i+1),bChunks.length)\n    value += dist(bChunks.slice(32*i, tail), aChunks[i])\n  }\n\n  // TODO this is the previous implementation - because of\n  // ac.pop() we need to reverse(aChunks) to produce same number\n  // is that correct or just side-effect?\n  // const value = bc.reduce(function (all, bd, i) {\n  //   return all + dist(bd, ac.pop())\n  // }, 0)\n  return Math.floor(value * 1000000000000000)\n}\n\n\n/**\n * Finds the mean of the distances from a provided set of hashed header proofs\n *\n * @param {number} currentTimestamp current time reference\n * @param {string} work reference to find distance > `threshold`\n * @param {string} miner Public address to which NRG award for mining the block and transactions will be credited to\n * @param {string} merkleRoot Mekle root of the BC block being mined\n * @param {number} threshold threshold for the result to be valid\n * @param {function} difficultyCalculator function for recalculating difficulty at given timestamp\n * @returns {Object} result containing found `nonce` and `distance` where distance is > `threshold` provided as parameter\n */\n// $FlowFixMe will never return anything else then a mining result\nexport function mine (currentTimestamp: number, work: string, miner: string, merkleRoot: string, threshold: number, difficultyCalculator: ?Function, reportType: ?number): { distance: string, nonce: string, timestamp: number, difficulty: string } {\n  let difficulty = threshold\n  let difficultyBN = new BN(difficulty)\n  let result\n  const tsStart = ts.now()\n  const maxCalculationEnd = tsStart + (MAX_TIMEOUT_SECONDS * 1000)\n  const workChunks = reverse(splitEvery(32, split(work)))\n  let currentLoopTimestamp = currentTimestamp\n  let iterations = 0\n  let res = null\n  let nowms = 0\n  let now = 0\n  let nonce = String(Math.abs(Random.engines.nativeMath()))\n  while (true) {\n    iterations += 1\n\n\t\tnowms = ts.now()\n\t\tnow = (nowms/1000)<<0\n\n    if (maxCalculationEnd < nowms) {\n      break\n    }\n\n    if (new BN(result).gt(difficultyBN) === true) {\n      res = {\n        distance: (result).toString(),\n        nonce,\n        timestamp: currentLoopTimestamp,\n        difficulty,\n        // NOTE: Following fields are for analyses only\n        iterations,\n        timeDiff: nowms - tsStart\n      }\n      break\n    }\n    // recalculate difficulty each second\n    if (difficultyCalculator && currentLoopTimestamp < now) {\n      currentLoopTimestamp = now\n      difficulty = difficultyCalculator(now)\n      difficultyBN = new BN(difficulty)\n    }\n    nonce = String(Math.abs(Random.engines.nativeMath()))\n    const nonceHash = blake2bl(nonce)\n    result = distanceFromCache(workChunks, blake2bl(miner + merkleRoot + nonceHash + currentLoopTimestamp))\n  }\n\n  // const tsEnd = ts.now()\n  // const tsDiff = tsEnd - tsStart\n  // if (res === null) {\n  //  throw Error(`Mining took more than ${MAX_TIMEOUT_SECONDS}s, iterations: ${iterations}, tsDiff: ${tsDiff} ending...`)\n  // }\n\n  return res\n}\n\n/// /////////////////////////////////////////////////////////////////////\n/// ////////////////////////\n/// ////////////////////////  PART 3 - Blockchain Header Proofs\n/// ////////////////////////\n/// /////////////////////////////////////////////////////////////////////\n\n/*\n * It will look like this:\n *\n *      function createBlockProof(blockchainFingerprint, rawBlock, callback)\n *\n * Where the fingerprint for Ethereum is \"bbe5c469c469cec1f8c0b01de640df724f3d9053c23b19c6ed1bc6ee0faf5160\"\n * as seen in bcnode/src/utils/templates/blockchain_fingerprints.json\n *\n */\nconst toHexBuffer: ((string) => Buffer) = partialRight(invoker(2, 'from'), ['hex', Buffer])\nconst hash: ((BlockchainHeader|Block) => string) = invoker(0, 'getHash')\nconst merkleRoot: ((BlockchainHeader|Block) => string) = invoker(0, 'getMerkleRoot')\n\n/**\n * Computes hash form a rovered block header as blake2bl(hash + mekleRoot)\n * @param {BlockchainHeader|Block} block to hash\n * @return {string} hash of the block\n */\nconst blockHash: (BlockchainHeader|Block => string) = compose(\n  blake2bl,\n  join(''),\n  zipWith(call, [hash, merkleRoot]),\n  flip(repeat)(2)\n)\n\nexport const getChildrenBlocksHashes: ((BlockchainHeader[]|Block[]) => string[]) = map(blockHash)\n\n// TODO should maintain sort (btc -> eth -> lsk -> neo -> wav)\nexport const blockchainMapToList = (headersMap: BlockchainHeaders): BlockchainHeader[] => {\n  return Object.keys(headersMap.toObject()).map(listName => {\n    const getMethodName = `get${listName[0].toUpperCase()}${listName.slice(1)}`\n    return headersMap[getMethodName]()\n  }).reduce((acc, curr) => {\n    return acc.concat(curr)\n  }, [])\n}\n\nexport const getChildrenRootHash = reduce((all: BN, blockHash: string) => {\n  return all.xor(new BN(toHexBuffer(blockHash)))\n}, new BN(0))\n\nexport function getParentShareDiff (parentDifficulty: number, childChainCount: number): BN {\n  return (new BN(parentDifficulty)).div(new BN(childChainCount))\n}\n\nexport function getMinimumDifficulty (childChainCount: number): BN {\n  // Standard deviation 100M cycles divided by the number of chains\n  return MINIMUM_DIFFICULTY.div(new BN(childChainCount))\n}\n\n// TODO rename arguments to better describe data\nexport function getNewPreExpDifficulty (\n  currentTimestamp: number,\n  lastPreviousBlock: BcBlock,\n  blockWhichTriggeredMining: Block,\n  newBlockCount: number\n) {\n  const preExpDiff = getDiff(\n    currentTimestamp,\n    lastPreviousBlock.getTimestamp(),\n    lastPreviousBlock.getDifficulty(),\n    MINIMUM_DIFFICULTY,\n    newBlockCount,\n    blockWhichTriggeredMining // aka getNewestHeader(newBlock)\n  ) // Calculate the final pre-singularity difficulty adjustment\n\n  return preExpDiff\n}\n\n/**\n * Return the `work` - string to which the distance is being guessed while mining\n *\n * @param {string} previousBlockHash Hash of last known previously mined BC block\n * @param {BlockchainHeaders} childrenCurrentBlocks Last know rovered blocks from each chain (one of them is the one which triggered mining)\n * @return {string} a hash representing the work\n */\nexport function prepareWork (previousBlockHash: string, childrenCurrentBlocks: BlockchainHeaders): string {\n  const newChainRoot = getChildrenRootHash(getChildrenBlocksHashes(blockchainMapToList(childrenCurrentBlocks)))\n  const work = blake2bl(\n    newChainRoot.xor(\n      new BN(\n        toHexBuffer(previousBlockHash)\n      )\n    ).toString()\n  )\n\n  return work\n}\n\nconst copyHeader = (block: BlockchainHeader|Block, confirmations: number): BlockchainHeader => {\n  const header = new BlockchainHeader()\n  header.setBlockchain(block.getBlockchain())\n  header.setHash(block.getHash())\n  header.setPreviousHash(block.getPreviousHash())\n  header.setTimestamp(block.getTimestamp())\n  header.setHeight(block.getHeight())\n  header.setMerkleRoot(block.getMerkleRoot())\n  header.setBlockchainConfirmationsInParentCount(confirmations)\n  return header\n}\n\nfunction prepareChildBlockHeadersMapForGenesis (currentBlockchainHeaders: Block[]): BlockchainHeaders {\n  const newMap = new BlockchainHeaders()\n  currentBlockchainHeaders.forEach(header => {\n    const blockchainHeader = copyHeader(header, 1)\n    const methodNameSet = `set${header.getBlockchain()[0].toUpperCase() + header.getBlockchain().slice(1)}List` // e.g. setBtcList\n    newMap[methodNameSet]([blockchainHeader])\n  })\n  return newMap\n}\n\n/**\n * Create a BlockchainHeader{} for new BcBlock, before count new confirmation count for each child block.\n *\n * Assumption here is that confirmation count of all headers from previous block is taken and incrementend by one\n * except for the one which caused the new block being mine - for that case is is reset to 1\n *\n * We're starting from 1 here because it is used for dividing\n *\n * @param {BcBlock} previousBlock Last known previously mined BC block\n * @param {Block} newChildBlock The last rovereed block - this one triggered the mining\n * @param {Block[]} newChildHeaders child headers which were rovered since the previousBlock\n * @return {BlockchainHeader[]} Headers of rovered chains with confirmations count calculated\n */\nfunction prepareChildBlockHeadersMap (previousBlock: BcBlock, newChildBlock: Block, newChildHeaders: Block[]): BlockchainHeaders {\n  const newChildHeadersMap = groupBy(block => block.getBlockchain(), newChildHeaders)\n\n  const keyOrMethodToChain = (keyOrMethod: string) => keyOrMethod.replace(/^get|set/, '').replace(/List$/, '').toLowerCase()\n  const chainToSet = (chain: string) => `set${chain[0].toUpperCase() + chain.slice(1)}List`\n  const chainToGet = (chain: string) => `get${chain[0].toUpperCase() + chain.slice(1)}List`\n\n  logger.debug(`newChildHeadersMap: ${inspect(toPairs(newChildHeadersMap).map(([chain, blocks]) => {\n    return 'chain: ' + chain + ' headers ' + inspect(blocks.map(block => copyHeader(block, 1).toObject()))\n  }), {depth: 3})}`)\n\n  const newBlockchainHeaders = new BlockchainHeaders()\n  // construct new BlockchainHeaders from newChildHeaders\n  toPairs(newChildHeadersMap).forEach(([chain, blocks]) => {\n    newBlockchainHeaders[chainToSet(chain)](blocks.map(block => copyHeader(block, 1)))\n  })\n\n  // if any list in header is empty take last header from previous block and raise confirmations by 1\n  Object.keys(newBlockchainHeaders.toObject()).forEach(listKey => {\n    const chain = keyOrMethodToChain(listKey)\n    const newlyAssignedBlocks = newBlockchainHeaders[chainToGet(chain)]()\n    logger.debug(`headers empty check, with method ${chainToGet(chain)}: ${newlyAssignedBlocks.map(b => b.toObject())}`)\n    if (newlyAssignedBlocks.length === 0) {\n      const lastHeaderFromPreviousBlock = last(previousBlock.getBlockchainHeaders()[chainToGet(chain)]())\n      if (!lastHeaderFromPreviousBlock) {\n        throw new Error(`Previous BC block ${previousBlock.getHeight()} does not have any \"${chain}\" headers`)\n      }\n      const headerFromPreviousBlock = copyHeader(lastHeaderFromPreviousBlock, lastHeaderFromPreviousBlock.getBlockchainConfirmationsInParentCount() + 1)\n      newBlockchainHeaders[chainToSet(chain)]([headerFromPreviousBlock])\n    }\n  })\n\n  logger.debug(`prepareChildBlockHeadersMap: previous BC block: ${previousBlock.getHeight()} final headers: ${inspect(Object.values(newBlockchainHeaders.toObject()), {depth: 3})}`)\n\n  return newBlockchainHeaders\n}\n\n/**\n * How many new child blocks are between previousBlockHeaders and currentBlockHeaders\n */\nexport function getNewBlockCount (previousBlockHeaders: BlockchainHeaders, currentBlockHeaders: BlockchainHeaders) {\n  // $FlowFixMe - protbuf toObject is not typed\n  return getChildBlockDiff(previousBlockHeaders, currentBlockHeaders)\n  // const headersToHashes = (headers: BlockchainHeaders) => Object.values(currentBlockHeaders.toObject()).reduce((acc, curr) => acc.concat(curr), []).map(headerObj => headerObj.hash)\n  // const previousHashes = headersToHashes(previousBlockHeaders)\n  // const currentHashes = headersToHashes(currentBlockHeaders)\n\n  // return difference(currentHashes, previousHashes).length\n}\n\n/**\n * How many new child blocks are between previousBlockHeaders and currentBlockHeaders\n */\nexport function getChildBlockDiff (previousBlockHeaders: BlockchainHeaders, currentBlockHeaders: BlockchainHeaders) {\n  // $FlowFixMe - protbuf toObject is not typed\n  const a = previousBlockHeaders.toObject()\n  const b = currentBlockHeaders.toObject()\n\n  return Object.keys(b).reduce((total, key) => {\n    const sa = a[key].map((header) => { return header.hash })\n    const sb = b[key].map((header) => { return header.hash })\n    total = total + difference(sa, sb).length\n    return total\n  }, 0)\n}\n\n/**\n * How many new child HASHES are between previousBlockHeaders and currentBlockHeaders\n */\nexport function getUniqueHashes (previousBlockHeaders: BlockchainHeaders, currentBlockHeaders: BlockchainHeaders) {\n  // $FlowFixMe - protbuf toObject is not typed\n  const headersToHashes = (headers: BlockchainHeaders) => Object.values(previousBlockHeaders.toObject()).reduce((acc, curr) => acc.concat(curr), []).map(headerObj => headerObj.hash)\n  const previousHashes = headersToHashes(previousBlockHeaders)\n  logger.info('previousHashes: ' + previousHashes)\n  const currentHashes = headersToHashes(currentBlockHeaders)\n  logger.info('currentHashes: ' + currentHashes)\n\n  return difference(currentHashes, previousHashes)\n  // return currentBlockHeaders.filter((b) => {\n  //  if (diff.indexOf(b.getHash()) > -1) {\n  //    return b\n  //  }\n  // })\n}\n\n/**\n * How many new child blocks are between previousBlockHeaders and currentBlockHeaders\n */\nexport function getUniqueBlocks (previousBlockHeaders: BlockchainHeaders, currentBlockHeaders: BlockchainHeaders) {\n  // $FlowFixMe - protbuf toObject is not typed\n  const headersToHashes = (headers: BlockchainHeaders) => Object.values(previousBlockHeaders.toObject()).reduce((acc, curr) => acc.concat(curr), []).map(headerObj => headerObj.hash)\n  const previousHashes = headersToHashes(previousBlockHeaders)\n  const currentHashes = headersToHashes(currentBlockHeaders)\n  const diff = difference(currentHashes, previousHashes)\n\n  const filterToDiff = currentBlockHeaders.filter((b) => {\n    if (diff.indexOf(b.getHash()) > -1) {\n      return b\n    }\n  })\n  return filterToDiff\n}\n\n/**\n * Used for preparing yet non existant BC block protobuf structure. Use before mining starts.\n *\n * - calculates block difficulty (from previous BC block difficulty and height, rovered chains count, and data in child chains headers) and stores it to structure\n * - stores headers of child chains (those being rovered)\n * - calculates new merkle root, hash and stores it to structure\n * - calculates new block height (previous + 1) and stores it to structure\n *\n * @param {number} currentTimestamp current timestamp reference\n * @param {BcBlock} lastPreviousBlock Last known previously mined BC block\n * @param {Block[]} newChildHeaders Child headers which were rovered since headers in lastPreviousBlock\n * @param {Block} blockWhichTriggeredMining The last rovered block - this one triggered the mining\n * @param {BcTransaction[]} newTransactions Transactions which will be added to newly mined block\n * @param {string} minerAddress Public addres to which NRG award for mining the block and transactions will be credited to\n * @param {BcBlock} unfinishedBlock If miner was running this is the block currently mined\n * @return {BcBlock} Prepared structure of the new BC block, does not contain `nonce` and `distance` which will be filled after successful mining of the block\n */\nexport function prepareNewBlock (currentTimestamp: number, lastPreviousBlock: BcBlock, newChildHeaders: Block[], blockWhichTriggeredMining: Block, newTransactions: BcTransaction[], minerAddress: string, unfinishedBlock: ?BcBlock): [BcBlock, number] {\n\n\n  let childBlockHeaders\n  if (lastPreviousBlock !== undefined && lastPreviousBlock.getHeight() === GENESIS_DATA.height) {\n    childBlockHeaders = prepareChildBlockHeadersMapForGenesis(newChildHeaders)\n  } else {\n    childBlockHeaders = prepareChildBlockHeadersMap(\n      unfinishedBlock || lastPreviousBlock,\n      blockWhichTriggeredMining,\n      newChildHeaders\n    )\n  }\n\n  /* eslint-disable */\n  //console.log(' BLOCK WHICH TRIGGERED MINING ')\n  //console.log(blockWhichTriggeredMining)\n  //console.log(' CHILD BLOCK HEADERS ' )\n  //console.log(childBlockHeaders)\n  //console.log(' LAST PREVIOUS BLOCK HEADERS' )\n  //console.log(lastPreviousBlock.getBlockchainHeaders())\n\n  const blockHashes = getChildrenBlocksHashes(blockchainMapToList(childBlockHeaders))\n  const newChainRoot = getChildrenRootHash(blockHashes)\n  const newBlockCount = getNewBlockCount(lastPreviousBlock.getBlockchainHeaders(), childBlockHeaders)\n  //const newBlockCount = getUniqueBlocks(lastPreviousBlock.getBlockchainHeaders(), childBlockHeaders).length\n\n  /* eslint-disable */\n  //console.log('currentTimestamp: ' + currentTimestamp)\n  //console.log('newBlockCount: ' + newBlockCount)\n\n  const preExpDiff = getNewPreExpDifficulty(\n    currentTimestamp,\n    lastPreviousBlock,\n    blockWhichTriggeredMining,\n    newBlockCount\n  )\n\n  //console.log('preExpDiff: ' + preExpDiff)\n  const finalDifficulty = getExpFactorDiff(preExpDiff, lastPreviousBlock.getHeight()).toString()\n\n  let heightIncrement = 1\n  if(BC_BT_VALIDATION === true && new BN(lastPreviousBlock.getHeight()).lt(new BN(2)) === true) {\n    heightIncrement = 496657\n  }\n\n  const newHeight = lastPreviousBlock.getHeight() + heightIncrement\n  // blockchains, transactions, miner address, height\n  // TODO add EMB data to merkleRoot AT\n  const newMerkleRoot = createMerkleRoot(concatAll([\n    blockHashes,\n    newTransactions,\n    [\n      finalDifficulty,\n      minerAddress,\n      newHeight,\n      GENESIS_DATA.version,\n      GENESIS_DATA.schemaVersion,\n      GENESIS_DATA.nrgGrant,\n      GENESIS_DATA.blockchainFingerprintsRoot\n    ]\n  ]))\n\n  let chainWeight = 0\n  if (new BN(lastPreviousBlock.getHeight()).gt(2) === true) {\n    chainWeight = new BN(lastPreviousBlock.getDistance()).sub(new BN(lastPreviousBlock.getDifficulty())).divRound(new BN(8)).toString()\n  }\n\n  const newBlock = new BcBlock()\n  newBlock.setHash(blake2bl(lastPreviousBlock.getHash() + newMerkleRoot))\n  newBlock.setPreviousHash(lastPreviousBlock.getHash())\n  newBlock.setVersion(1)\n  newBlock.setSchemaVersion(1)\n  newBlock.setHeight(newHeight)\n  newBlock.setMiner(minerAddress)\n  newBlock.setDifficulty(finalDifficulty)\n  newBlock.setMerkleRoot(newMerkleRoot)\n  newBlock.setChainRoot(blake2bl(newChainRoot.toString()))\n  newBlock.setDistance(chainWeight) // is set to proper value after successful mining\n  newBlock.setTotalDistance(lastPreviousBlock.getTotalDistance()) // distance from mining solution will be added to this after mining\n  newBlock.setNrgGrant(GENESIS_DATA.nrgGrant)\n  newBlock.setTargetHash(GENESIS_DATA.targetHash)\n  newBlock.setTargetHeight(GENESIS_DATA.targetHeight)\n  newBlock.setTargetMiner(GENESIS_DATA.targetMiner)\n  newBlock.setTargetSignature(GENESIS_DATA.targetSignature)\n  newBlock.setTwn(GENESIS_DATA.twn) // Overline\n  newBlock.setTwsList(GENESIS_DATA.twsList) // Overline\n  newBlock.setEmblemWeight(GENESIS_DATA.emblemWeight)\n  newBlock.setEmblemChainBlockHash(GENESIS_DATA.emblemChainBlockHash)\n  newBlock.setEmblemChainFingerprintRoot(GENESIS_DATA.emblemChainFingerprintRoot)\n  newBlock.setEmblemChainAddress(GENESIS_DATA.emblemChainAddress)\n  newBlock.setTxCount(0)\n  newBlock.setTxsList(newTransactions)\n  newBlock.setBlockchainHeadersCount(newChildHeaders.length)\n  newBlock.setBlockchainFingerprintsRoot(GENESIS_DATA.blockchainFingerprintsRoot)\n  newBlock.setTxFeeBase(GENESIS_DATA.txFeeBase)\n  newBlock.setTxDistanceSumLimit(GENESIS_DATA.txDistanceSumLimit)\n  newBlock.setBlockchainHeaders(childBlockHeaders)\n\n  /* eslint-disable */\n  logger.info('distance <- minimum difficulty threshold ' + newBlock.getDifficulty())\n\n  return [newBlock, currentTimestamp]\n}\n"]}