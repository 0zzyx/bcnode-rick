{"version":3,"sources":["../../src/p2p/node.es6"],"names":["inspect","require","Url","PeerInfo","queue","LRUCache","BN","debug","config","logging","BcBlock","ManagedPeerBook","Bundle","default","Discovery","PeerManager","Multiverse","BlockPool","MIN_HEALTH_NET","process","env","USER_QUORUM","bc","quorum","BC_BT_VALIDATION","BC_MAX_CONNECTIONS","maximumWaypoints","range","max","protocolBits","on","err","console","trace","PeerNode","constructor","engine","_engine","_multiverse","persistence","_blockPool","_pubsub","_logger","getLogger","__filename","_p2p","givenHostName","_manager","_ds","_greetingRegister","_knownBlocks","_seededPeers","_queue","task","cb","Array","getBulk","then","res","catch","get","p2p","stats","enabled","_interval","setInterval","manager","peerBookConnected","getPeersCount","interval","bundle","_bundle","peer","_peer","peerBook","reportSyncPeriod","receiveSyncPeriod","blockpool","multiverse","getLiteMultiverse","latest","getHeight","Promise","resolve","query","set","undefined","length","unshift","sort","a","b","gt","lt","error","warn","start","nodeId","discovery","join","hash","port","data","_emitter","msg","type","qsend","connection","serializeBinary","list","serial","map","l","info","announceData","tasks","connections","conn","all","address","remoteAddress","remotePort","latestBlock","quorumState","parseInt","connected","put","remaining","peerDataHandler","chunk","toString","complete","obj","split","low","high","Error","getMultiverseHandler","request","stepSyncHandler","blockFromPeer","_seeder","seeder","channel","url","parse","h","href","host","Number","retries","Buffer","from","id","remoteHost","name","_discovery","emit","log","str","slice","parts","rawUint","raw","Uint8Array","block","deserializeBinary","results","outboundType","n","push","r","indexOf","reduce","rawBlock","sorted","startDiscovery","stopDiscovery","broadcastNewBlock","withoutPeerId","toObject","filters","triggerBlockSync","getAllArray","createPeer","getMultiverse","toB58String"],"mappings":"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","file":"node.js","sourcesContent":["/**\n * Copyright (c) 2017-present, blockcollider.org developers, All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/* eslint no-console: [\"error\", { allow: [\"warn\", \"error\", \"log\", \"trace\"  ] }] */\n\nimport type { Engine } from '../engine'\n\nconst { inspect } = require('util')\n\nconst Url = require('url')\nconst PeerInfo = require('peer-info')\nconst queue = require('async/queue')\n// const pull = require('pull-stream')\n// const toPull = require('stream-to-pull-stream')\n\nconst LRUCache = require('lru-cache')\nconst BN = require('bn.js')\nconst debug = require('debug')('bcnode:p2p:node')\nconst { config } = require('../config')\nconst logging = require('../logger')\n\nconst { BcBlock } = require('../protos/core_pb')\nconst { ManagedPeerBook } = require('./book')\nconst Bundle = require('./bundle').default\nconst Discovery = require('./discovery')\nconst { PeerManager } = require('./manager/manager')\nconst { Multiverse } = require('../bc/multiverse')\nconst { BlockPool } = require('../bc/blockpool')\n\nconst MIN_HEALTH_NET = process.env.MIN_HEALTH_NET === 'true'\nconst USER_QUORUM = process.env.USER_QUORUM || config.bc.quorum\nconst BC_BT_VALIDATION = process.env.BC_BT_VALIDATION === 'true'\nconst BC_MAX_CONNECTIONS = process.env.BC_MAX_CONNECTIONS || config.bc.maximumWaypoints\n\nconst { range, max } = require('ramda')\nconst { protocolBits } = require('../engine/helper')\n// const { validateBlockSequence } = require('../bc/validation')\n\nprocess.on('uncaughtError', (err) => {\n  /* eslint-disable */\n  console.trace(err)\n  /* eslint-enable */\n})\n\nexport class PeerNode {\n  _logger: Object // eslint-disable-line no-undef\n  _engine: Engine // eslint-disable-line no-undef\n  _interval: IntervalID // eslint-disable-line no-undef\n  _bundle: Bundle // eslint-disable-line no-undef\n  _manager: PeerManager // eslint-disable-line no-undef\n  _peer: PeerInfo // eslint-disable-line no-undef\n  _seededPeers: Object // eslint-disable-line no-undef\n  _multiverse: Multiverse // eslint-disable-line no-undef\n  _blockPool: BlockPool // eslint-disable-line no-undef\n  _identity: string // eslint-disable-line no-undef\n  _scanner: Object // eslint-disable-line no-undef\n  _externalIP: string // eslint-disable-line no-undef\n  _knownBlocks: Object // eslint-disable-line no-undef\n  _ds: Object // eslint-disable-line no-undef\n  _p2p: Discovery // eslint-disable-line no-undef\n  _queue: Object // eslint-disable-line no-undef\n  _greetingRegister: Object // eslint-disable-line no-undef\n\n  constructor (engine: Engine) {\n    this._engine = engine\n    this._multiverse = new Multiverse(engine.persistence) /// !important this is a (nonselective) multiverse\n    this._blockPool = new BlockPool(engine.persistence, engine._pubsub)\n    this._logger = logging.getLogger(__filename)\n    this._p2p = {\n      givenHostName: false\n    }\n    this._manager = new PeerManager(this)\n    this._ds = {}\n    this._greetingRegister = {}\n    this._knownBlocks = LRUCache({\n      max: 1000\n    })\n    this._seededPeers = LRUCache({\n      max: 1000\n    })\n    this._queue = queue((task, cb) => {\n      if (task.constructor === Array) {\n        this._engine.persistence.getBulk(task).then((res) => {\n          cb(null, res)\n        })\n          .catch((err) => {\n            cb(err)\n          })\n      } else {\n        this._engine.persistence.get(task).then((res) => {\n          cb(null, res)\n        })\n          .catch((err) => {\n            cb(err)\n          })\n      }\n    })\n\n    if (config.p2p.stats.enabled) {\n      this._interval = setInterval(() => {\n        debug(`peers count ${this.manager.peerBookConnected.getPeersCount()}`)\n      }, config.p2p.stats.interval * 1000)\n    }\n  }\n\n  get bundle (): Bundle {\n    return this._bundle\n  }\n\n  get manager (): PeerManager {\n    return this._manager\n  }\n\n  get peer (): PeerInfo {\n    return this._peer\n  }\n\n  get peerBook (): ManagedPeerBook {\n    return this.manager.peerBook\n  }\n\n  get reportSyncPeriod (): Function {\n    return this._engine.receiveSyncPeriod\n  }\n\n  get blockpool (): BlockPool {\n    return this._blockPool\n  }\n\n  get multiverse (): Multiverse {\n    return this._multiverse\n  }\n\n  set multiverse (multiverse: Multiverse) {\n    this._multiverse = multiverse\n  }\n\n  async getLiteMultiverse (latest: Object): Promise<*> {\n    if (latest.getHeight() < 4) {\n      return Promise.resolve([\n        latest\n      ])\n    }\n    const query = [\n      'bc.block.' + (latest.getHeight() - 1),\n      'bc.block.' + (latest.getHeight() - 2)\n    ]\n\n    try {\n      const set = await this._engine.persistence.getBulk(query)\n      // if it is a valid set of multiple options send it otherwise resolve with the latest\n      if (set !== undefined && set !== false && set.length > 0) {\n        set.unshift(latest)\n        return Promise.resolve(set.sort((a, b) => {\n          if (new BN(a.getHeight()).gt(new BN(b.getHeight())) === true) {\n            return -1\n          }\n          if (new BN(a.getHeight()).lt(new BN(b.getHeight())) === true) {\n            return 1\n          }\n          return 0\n        }))\n      }\n      return Promise.resolve([latest])\n    } catch (err) {\n      this._logger.error(err)\n      this._logger.warn('multiverse not set on disk')\n      return Promise.resolve([latest])\n    }\n  }\n\n  async start (nodeId: string) {\n    const discovery = new Discovery(nodeId)\n    this._p2p = discovery.start()\n    this._p2p.join(this._p2p.hash, this._p2p.port, (data) => {\n      this._engine._emitter.on('sendblockcontext', (msg) => {\n        if (msg.data.constructor === Array.constructor) return\n        const type = '0008W01'\n        return this._p2p.qsend(msg.connection, type + '[*]' + msg.data.serializeBinary())\n      })\n\n      this._engine._emitter.on('sendblock', (msg) => {\n        const type = '0008W01'\n        this.getLiteMultiverse(msg.data).then((list) => {\n          const serial = list.map((l) => { return l.serializeBinary() }).join(protocolBits[type])\n          this._p2p.qsend(msg.connection, type + protocolBits[type] + serial)\n            .then(() => {\n              this._logger.info('block sent!')\n            })\n            .catch((err) => {\n              this._logger.warn('critical block rewards feature is failing with this error')\n              this._logger.error(err)\n            })\n        })\n      })\n\n      this._engine._emitter.on('announceblock', (msg) => {\n        const type = '0008W01'\n        this._logger.info('announceblock <- event')\n        // this._engine.persistence.get('bc.block.' + msg.data.getHeight() - 1\n        //\n        // this.getLiteMultiverse(msg.data).then((list) => {\n        const serial = msg.data.serializeBinary()\n        const announceData = type + protocolBits[type] + serial\n        const tasks = this._p2p.connections.map((conn) => {\n          return this._p2p.qsend(conn, announceData)\n        })\n        return Promise.all(tasks).then(() => {\n          this._logger.info('block announced!')\n        })\n          .catch((err) => {\n            this._logger.warn('connection failure when announcing to network')\n            this._logger.error(err)\n          })\n        // })\n        //  .catch((err) => {\n        //    this._logger.warn('critical block rewards feature is failing with this error')\n        //    this._logger.error(err)\n        //  })\n      })\n\n      this._logger.info('initialized far reaching discovery module')\n\n      this._p2p.on('connection', (conn, info) => {\n        (async () => {\n          // greeting reponse to connection with provided host information and connection ID\n          const address = conn.remoteAddress + ':' + conn.remotePort\n          const latestBlock = await this._engine.persistence.get('bc.block.latest')\n          if (this._ds[address] === undefined) {\n            this._ds[address] = false\n          }\n          // https://github.com/webtorrent/bittorrent-dht/blob/master/client.js#L579r\n          // const msg = '0000R01' + info.host + '*' + info.port + '*' + info.id.toString('hex')\n          const type = '0008W01'\n          const list = await this.getLiteMultiverse(latestBlock)\n          const serial = list.map((l) => { return l.serializeBinary() }).join(protocolBits[type])\n          const msg = type + protocolBits[type] + serial\n          try {\n            await this._p2p.qsend(conn, msg)\n          } catch (err) {\n            this._logger.debug(err)\n          }\n          // get heighest block\n          const quorumState = await this._engine.persistence.get('bc.dht.quorum')\n          const quorum = parseInt(quorumState, 10) // coerce for Flow\n\n          if (this._p2p.connected < USER_QUORUM && quorum === 1 && MIN_HEALTH_NET === false) {\n            await this._engine.persistence.put('bc.dht.quorum', '0')\n          } else if (this._p2p.connected >= USER_QUORUM && quorum === 0) {\n            await this._engine.persistence.put('bc.dht.quorum', '1')\n          } else if (quorum === 0 && MIN_HEALTH_NET === true) {\n            await this._engine.persistence.put('bc.dht.quorum', '1')\n          }\n\n          // const { source, sink } = toPull.duplex(conn)\n\n          // pull(\n          //   pull.values([msg]),\n          //   sink,\n          // )\n\n          // pull(\n          //   source,\n          //   pull.collect((err, data) => {\n          //     //debug(err)\n          //     //debug(data)\n          //     this.peerDataHandler(conn, info, data)\n          //   })\n          // )\n\n          conn.on('data', (data) => {\n            if (!data && this._ds[address] !== false) {\n              const remaining = '' + this._ds[address]\n              this._ds[address] = false\n              this.peerDataHandler(conn, info, remaining)\n            } else {\n              if (data.length > 95000) {\n                return\n              }\n              if (this._ds[address] !== undefined && this._ds[address] !== false && this._ds[address].length > 95000) {\n                this._ds[address] = false\n                return\n              }\n              let chunk = data.toString()\n              if (chunk.length === 1382 && this._ds[address] === false) {\n                this._ds[address] = chunk\n              } else if (chunk.length === 1382 && this._ds[address] !== false) {\n                this._ds[address] = this._ds[address] + chunk\n              } else if (chunk.length !== 1382 && this._ds[address] !== false) {\n                const complete = '' + this._ds[address] + chunk\n                this._ds[address] = false\n                this.peerDataHandler(conn, info, complete)\n              } else {\n                this.peerDataHandler(conn, info, chunk)\n              }\n            }\n          })\n        })().catch(err => {\n          this._logger.error(err)\n        })\n      })\n\n      this._engine._emitter.on('getmultiverse', (obj) => {\n        const type = '0009R01' // read selective block list (multiverse)\n        const split = protocolBits[type]\n        const low = obj.data.low\n        const high = obj.data.high\n        const msg = type + split + low + split + high\n        this._p2p.qsend(obj.connection, msg)\n          .then((res) => {\n            if (res !== undefined && res.length !== undefined) {\n              this._logger.info(res.length + ' delivered')\n            }\n          })\n          .catch((err) => {\n            this._logger.error(new Error('critical write to peer socket failed'))\n            this._logger.error(err)\n          })\n      })\n\n      this._engine._emitter.on('putmultiverse', (msg) => {\n        this._engine.getMultiverseHandler(msg, msg.data)\n          .then((res) => {\n            this._logger.info(res)\n          })\n          .catch((err) => {\n            this._logger.error(err)\n          })\n      })\n\n      this._engine._emitter.on('getblocklist', (request) => {\n        const type = '0006R01'\n        const split = protocolBits[type]\n        const low = request.low\n        const high = request.high\n        const msg = type + split + low + split + high\n        this._p2p.qsend(request.connection, msg).then((res) => {\n          if (res !== undefined && res.length > 0) {\n            return Promise.resolve(true)\n          }\n          return Promise.resolve(false)\n        })\n          .catch((err) => {\n            this._logger.error(err)\n            return Promise.resolve(false)\n          })\n      })\n\n      this._engine._emitter.on('putblocklist', (msg) => {\n        this._engine.stepSyncHandler(msg)\n          .then(() => {\n            this._logger.debug('stepSync complete sent')\n          })\n          .catch((err) => {\n            this._logger.error(err)\n          })\n      })\n\n      this._engine._emitter.on('putblock', (msg) => {\n        this._logger.debug('candidate block ' + msg.data.getHeight() + ' recieved')\n        this._engine.blockFromPeer(msg, msg.data)\n      })\n\n      /*\n         * PEER SEEDER\n         */\n      this._p2p._seeder = discovery.seeder()\n\n      this._p2p._seeder.on('peer', (peer) => {\n        if (this._p2p.connected > BC_MAX_CONNECTIONS) {\n          this._logger.info('passed on peer handle <- ' + this._p2p.connected + ' connections')\n          return\n        }\n\n        const channel = this._p2p.hash\n        const url = Url.parse(peer)\n        const h = url.href.split(':')\n        const obj = {\n          // id: crypto.createHash('sha1').update(peer).digest('hex'),\n          host: h[0],\n          port: Number(h[1]) + 1, // seeder broadcasts listen on one port below the peers address\n          retries: 0,\n          channel: Buffer.from(channel)\n        }\n        obj.id = obj.host + ':' + obj.port\n        obj.remotePort = obj.port\n        obj.remoteHost = obj.host\n\n        try {\n          const name = obj.host + ':' + obj.port + this._p2p.hash\n          this._p2p._discovery.emit('peer', name, obj, 'utp')\n        } catch (err) {\n          console.log('')\n        }\n      })\n\n      this._p2p._seeder.start()\n      this._manager._p2p = this._p2p\n      this._engine._p2p = this._p2p\n\n      this._logger.info('joined waypoint table')\n      setInterval(() => {\n        // this._logger.info('peers', Object.getOwnPropertyNames(this._p2p._discovery.dht))\n        // this._logger.info('peers', this._p2p._discovery.dht._peers)\n        this._logger.info('active waypoints:  ' + this._p2p.connected)\n        this._engine._emitter.emit('peerCount', this._p2p.connected)\n        if (this._p2p.connected < USER_QUORUM && MIN_HEALTH_NET !== true) {\n          this._engine.persistence.put('bc.dht.quorum', '0')\n            .then(() => {\n              this._logger.info('searching for additional waypoints')\n            })\n            .catch((err) => {\n              this._logger.debug(err)\n            })\n        }\n      }, 30900)\n    })\n    return Promise.resolve(true)\n  }\n\n  // const protocolBits = {\n  //   '0000R01': '[*]', // introduction\n  //   '0001R01': '[*]', // reserved\n  //   '0002W01': '[*]', // reserved\n  //   '0003R01': '[*]', // reserved\n  //   '0004W01': '[*]', // reserved\n  //   '0005R01': '[*]', // list services\n  //   '0006R01': '[*]', // read block heights\n  //   '0007W01': '[*]', // write block heights\n  //   '0008R01': '[*]', // read highest block\n  //   '0008W01': '[*]', // write highest block\n  //   '0009R01': '[*]', // read multiverse (selective sync)\n  //   '0010W01': '[*]'  // write multiverse (selective sync)\n  // }\n  peerDataHandler (conn: Object, info: Object, str: ?string) {\n    (async () => {\n      if (!str) { return }\n      if (str.length < 8) { return }\n      if (str.length > 95000) { return }\n\n      // TODO: add lz4 compression for things larger than 1000 characters\n      const type = str.slice(0, 7)\n      if (protocolBits[type] === undefined) {\n        return\n      }\n\n      if (type !== '0008W01' && BC_BT_VALIDATION !== true) {\n        return\n      }\n\n      this._logger.debug('peerDataHandler <- ' + type)\n      // Peer Sent Highest Block\n      if (type === '0007W01') {\n        // this._logger.info('::::::::::::::::::::::::' + type)\n        const parts = str.split(protocolBits[type])\n        const rawUint = parts[1]\n        const raw = new Uint8Array(rawUint.split(','))\n        const block = BcBlock.deserializeBinary(raw)\n\n        /* eslint-disable */\n        this._engine._emitter.emit('putblock', {\n          data: block,\n          connection: conn\n        })\n\n      // Peer Requests Highest Block\n      } else if (type === '0008R01') {\n        //this._logger.info(\"::::::::::::::::::::::::\" + type)\n        const latestBlock = await this._engine.persistence.get('bc.block.latest')\n        const msg = '0008W01' + protocolBits[type] + latestBlock.serializeBinary()\n        const results = await this._p2p.qsend(conn, msg)\n\n        if (results && results.length > 0) {\n          this._logger.info('successful update sent to peer')\n        }\n\n      // Peer Requests Block Range\n      } else if (type === '0006R01' || type === '0009R01') {\n\n        //this._logger.info(\"::::::::::::::::::::::::\" + type)\n        const parts = str.split(protocolBits[type])\n        const low = parseInt(parts[1])\n        const high = parseInt(parts[2])\n\n        let outboundType = '0007W01'\n        if (type === '0009R01') {\n          outboundType = '0010W01'\n        }\n\n        this._logger.info(`getblocklist handler: ${outboundType}, ${max(2, low)}, ${(high + 1)}`)\n\n        try {\n          const query = range(max(2, low), (high + 1)).map((n) => {\n            return 'bc.block.' + n\n          })\n\n          //console.log(query)\n          this._logger.info(query.length + ' blocks requested by peer: ' + conn.remoteHost)\n          this._queue.push(query, (err, res) => {\n\n            if (err) {\n              this._logger.warn(err)\n            } else {\n              const split = protocolBits[outboundType]\n              const msg = [outboundType, res.map((r) => {\n                return r.serializeBinary()\n              })].join(split)\n              this._p2p.qsend(conn, msg).then(() => {\n                this._logger.info('sent message of length: ' + msg.length)\n              })\n                .catch((err) => {\n                  this._logger.error(err)\n                })\n            }\n          })\n        } catch (err) {\n          this._logger.error(err)\n        }\n\n      // Peer Sends Challenge Block\n      } else if (type === '0011W01') {\n\n        const parts = str.split(protocolBits[type])\n\n        if(parts[1].indexOf(',') > -1) {\n          const rawUint = parts[1]\n          const raw = new Uint8Array(rawUint.split(','))\n          const block = BcBlock.deserializeBinary(raw)\n\n          this._engine._emitter.emit('putblock', {\n            data: block,\n            connection: conn\n          })\n        } else {\n          const raw = new Uint8Array(parts[1])\n          const block = BcBlock.deserializeBinary(raw)\n\n          this._engine._emitter.emit('putblock', {\n            data: block,\n            connection: conn\n          })\n        }\n      // Peer Sends New Block\n      } else if (type === '0008W01') {\n        //this._logger.info(\"::::::::::::::::::::::::\" + type)\n        const parts = str.split(protocolBits[type])\n\n        let raw\n\n        if(parts[1].indexOf(',') > -1) {\n          const rawUint = parts[1]\n          raw = new Uint8Array(rawUint.split(','))\n        } else {\n          raw = new Uint8Array(parts[1])\n        }\n        const block = BcBlock.deserializeBinary(raw)\n        this._engine._emitter.emit('putblock', {\n          data: block,\n          connection: conn\n        })\n\n        //try {\n        //  const latestBlock = await this._engine.persistence.get('bc.block.latest')\n        //  if(new BN(block.getHeight()).lt(new BN(latestBlock.getHeight())) === true){\n        //    const msg = '0008W01' + protocolBits[type] + latestBlock.serializeBinary()\n        //    await this._p2p.qsend(conn, msg)\n        //  }\n        //} catch (err) {\n        //  this._logger.error(err)\n        //}\n\n      // Peer Sends Block List 0007 // Peer Sends Multiverse 001\n      } else if (type === '0007W01' || type === '0010W01') {\n        const parts = str.split(protocolBits[type])\n        // this._logger.info(`:::::::::::::::::::::::: ${type}`)\n\n        try {\n\n          const list = parts.split(protocolBits[type]).reduce((all, rawBlock) => {\n            const raw = new Uint8Array(rawBlock.split(','))\n            all.push(BcBlock.deserializeBinary(raw))\n            return all\n          }, [])\n\n          const sorted = list.sort((a, b) => {\n            if (a.getHeight() > b.getHeight()) {\n              return -1 // move block forward\n            }\n            if (a.getHeight() < b.getHeight()) {\n              return 1 // move block forward\n            }\n            return 0\n          })\n\n          //this._logger.info(77777777777777777777777)\n          if (type === '0007W01') {\n        //this._logger.info(\"::::::::::::::::::::::::\" + type)\n            this._engine._emitter.emit('putblocklist', {\n              data: {\n                low: sorted[sorted.length - 1], // lowest block\n                high: sorted[0] // highest block\n              },\n              connection: conn\n            })\n          } else if (type === '0010W01') {\n            // this._logger.info(\"::::::::::::::::::::::::\" + type)\n            this._engine._emitter.emit('putmultiverse', {\n              data: sorted,\n              connection: conn\n            })\n          }\n        } catch (err) {\n          this._logger.debug('unable to parse: ' + type + ' from peer ')\n        }\n      } else {\n        this._logger.info('unknown protocol flag received: ' + type)\n      }\n\n      return Promise.resolve(true)\n    })().catch(err => {\n      this._logger.debug(err)\n    })\n  }\n\n  /**\n   *  Start (all) discovery services\n   *\n   * @returns {Promise}\n   */\n  startDiscovery (): Promise<bool> {\n    debug('startDiscovery()')\n\n    if (!this.bundle) {\n      return Promise.resolve(false)\n    }\n\n    return this.bundle.startDiscovery()\n  }\n\n  /**\n   * Stop (all) discovery services\n   *\n   * @returns {Promise}\n   */\n  stopDiscovery (): Promise<bool> {\n    debug('stopDiscovery()')\n\n    if (!this.bundle) {\n      return Promise.resolve(false)\n    }\n\n    return this.bundle.stopDiscovery()\n  }\n\n  broadcastNewBlock (block: BcBlock, withoutPeerId: ?Object) {\n    this._logger.debug(`broadcasting msg to peers, ${inspect(block.toObject())}`)\n\n    let filters = []\n    if (withoutPeerId !== undefined) {\n      if (withoutPeerId.constructor === Array) {\n        filters = withoutPeerId\n      } else {\n        filters.push(withoutPeerId)\n      }\n    }\n    this._engine._emitter.emit('announceblock', { data: block, filters: filters })\n  }\n\n  // get the best multiverse from all peers\n  triggerBlockSync () {\n    // const peerMultiverses = []\n    // Notify miner to stop mining\n    this.reportSyncPeriod(true)\n\n    this.manager.peerBookConnected.getAllArray().map(peer => {\n      this.reportSyncPeriod(true)\n      this.manager.createPeer(peer)\n        .getMultiverse()\n        .then((multiverse) => {\n          debug('Got multiverse from peer', peer.id.toB58String())\n          // peerMultiverses.push(multiverse)\n\n          // if (peerMultiverses.length >= PEER_QUORUM_SIZE) {\n          //  const candidates = peerMultiverses.reduce((acc: Array<Object>, peerMultiverse) => {\n          //    if (peerMultiverse.length > 0 && validateBlockSequence(peerMultiverse)) {\n          //      acc.push(peerMultiverse)\n          //    }\n\n          //    return acc\n          //  }, [])\n\n          //  if (candidates.length >= PEER_QUORUM_SIZE) {\n          //    const uniqueCandidates = uniqBy((candidate) => candidate[0].getHash(), candidates)\n          //    if (uniqueCandidates.length === 1) {\n          //      // TODO: Commit as active multiverse and begin full sync from known peers\n          //    } else {\n          //      const peerMultiverseByDifficultySum = uniqueCandidates\n          //        .map(peerBlocks => peerBlocks[0])\n          //        .sort(blockByTotalDistanceSorter)\n\n          //      const winningMultiverse = peerMultiverseByDifficultySum[0]\n          //      // TODO split the work among multiple correct candidates\n          //      // const syncCandidates = candidates.filter((candidate) => {\n          //      //   if (winner.getHash() === candidate[0].getHash()) {\n          //      //     return true\n          //      //   }\n          //      //   return false\n          //      // })\n          //      const lowestBlock = this.multiverse.getLowestBlock()\n          //      // TODO handle winningMultiverse[0] === undefined, see sentry BCNODE-6F\n          //      if (lowestBlock && lowestBlock.getHash() !== winningMultiverse[0].getHash()) {\n          //        this._blockPool.maximumHeight = lowestBlock.getHeight()\n          //        // insert into the multiverse\n          //        winningMultiverse.map(block => this.multiverse.addNextBlock(block))\n          //        // TODO: Use RXP\n          //        // Report not syncing\n          //        this.reportSyncPeriod(false)\n          //      }\n          //    }\n          //  }\n          // }\n        })\n    })\n  }\n}\n\nexport default PeerNode\n"]}