{"version":3,"sources":["../../src/engine/index.es6"],"names":["console","warn","debug","require","crypto","EventEmitter","join","resolve","writeFileSync","max","queue","maxmind","LRUCache","BN","semver","fkill","config","ensureDebugPath","Multiverse","getLogger","Monitor","Node","RoverManager","rovers","Server","PersistenceRocksDb","RocksDb","PubSub","RpcServer","getGenesisBlock","getBootBlock","BlockPool","isValidBlockCached","validateSequenceDifficulty","Block","errToString","getVersion","MiningOfficer","WorkerPool","ts","default","GEO_DB_PATH","__dirname","DATA_DIR","process","env","BC_DATA_DIR","persistence","path","MONITOR_ENABLED","BC_MONITOR","BC_CHECK","PERSIST_ROVER_DATA","BC_BT_VALIDATION","BC_REMOVE_BTC","on","err","trace","exit","Engine","constructor","opts","_logger","__filename","_knownRovers","_minerKey","minerKey","_rawBlock","_blockCache","_monitor","_persistence","_pubsub","_node","_rovers","_emitter","_rpc","_server","_subscribers","_verses","_stepSyncTimestamps","count","_storageQueue","fn","cb","then","res","catch","_geoDb","openSync","error","_knownEvaluationsCache","engine","knownBlocksCache","_knownBlocksCache","_rawBlocks","rawBlocksCache","_peerIsSyncing","_peerIsResyncing","start","geoDb","workerPool","_workerPool","multiverse","node","blockpool","pubsub","init","roverNames","Object","keys","npm","git","long","newGenesisBlock","versionData","version","commit","db_version","engineQueue","DB_LOCATION","_db","location","DELETE_MESSAGE","open","get","lt","_","put","info","del","latestBlock","addNextBlock","getHash","e","message","BC_BOOT_BLOCK","undefined","bootBlock","getHeight","_chain","unshift","integrityCheck","subscribe","msg","storeHeight","data","push","purge","has","set","updateLatestAndStore","previousBlock","mined","length","BC_PLUGIN","pluginPath","plugin","main","unfinishedBlock","solution","_processMinedBlock","_broadcastMinedBlock","_miningOfficer","emitter","force","miningOfficer","_handleWorkerFinishedMessage","candidates","reduce","all","block","blockchains","getBlockchainHeaders","toObject","key","getBlockchain","headers","found","f","header","nextBlock","shift","newRoveredBlock","pid","simMining","Promise","reject","prev","getPreviousHash","getTotalDistance","Error","storeChildHeaders","btc","neo","lsk","eth","wav","childHeaders","previousLatest","parent","synclock","gt","getTimestamp","gte","putChildHeaders","Array","oldest","grandparent","b","pop","_canMine","latestRoveredHeadersKeys","map","chain","latestBlockHeaders","getBulk","r","_collectedBlocks","rawBlock","rpc","server","startNode","nodeId","now","Math","floor","Date","nodeObjectData","nodeObject","JSON","parse","id","timestamp","nodeTimestamp","createHash","update","randomBytes","toString","digest","stringify","_wsBroadcastPeerConnected","peer","_wsBroadcastPeerDisonnected","startRovers","forEach","name","startRover","allRise","_writeRoverData","nextTick","limit","stepFrom","flushFrom","sendPeerLatestBlock","conn","newBlock","getPeerInfo","peerInfo","targetPeer","toB58String","sendBlockToPeer","syncSetBlocksInline","blocks","blockKey","valid","validateBlockSequenceInline","tasks","item","proveTwo","depthData","depth","parseInt","upperBound","lowBound","peerLockKey","peerLock","query","queryHash","queryHeight","low","high","manager","createPeer","blocksStoredResults","putPending","stepSyncHandler","cancelSync","obj","connction","connection","emit","previousTimestamp","stepSync","height","syncBlockHash","syncBlock","getPeerEvent","newBlocks","lowest","putPeerEvent","blockFromPeer","isNextBlock","options","publish","broadcastNewBlock","addResyncRequest","shouldResync","sub","toNumber","multiverseError","getMultiverseHandler","sorted","sort","a","highestBlock","getHighestBlock","conditional","hasBlock","concat","isSyncLockActive","lock","targetHeight","getLowestBlock","receiveSyncPeriod","peerIsSyncing","startServer","run","requestExit","stop","killRovers","dataPath","rawData","encoding","flag","newBlockObj","iterations","timeDiff","type","_wsBroadcastMultiverse"],"mappings":"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","file":"index.js","sourcesContent":["/*\n * Copyright (c) 2017-present, Block Collider developers, All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type { Logger } from 'winston'\nimport type { BcBlock } from '../protos/core_pb'\n\n/* eslint-disable */\nconsole.warn = () => {}\n/* eslint-enable */\n\nconst debug = require('debug')('bcnode:engine')\nconst crypto = require('crypto')\n\nconst { EventEmitter } = require('events')\nconst { join, resolve } = require('path')\nconst { writeFileSync } = require('fs')\nconst { max } = require('ramda')\nconst { queue } = require('async')\nconst maxmind = require('maxmind')\nconst LRUCache = require('lru-cache')\nconst BN = require('bn.js')\nconst semver = require('semver')\nconst fkill = require('fkill')\nconst { config } = require('../config')\nconst { ensureDebugPath } = require('../debug')\nconst { Multiverse } = require('../bc/multiverse')\nconst { getLogger } = require('../logger')\nconst { Monitor } = require('../monitor')\nconst { Node } = require('../p2p')\nconst { RoverManager } = require('../rover/manager')\nconst rovers = require('../rover/manager').rovers\nconst { Server } = require('../server/index')\nconst PersistenceRocksDb = require('../persistence').RocksDb\nconst { PubSub } = require('./pubsub')\nconst { RpcServer } = require('../rpc/index')\nconst { getGenesisBlock } = require('../bc/genesis')\nconst { getBootBlock } = require('../bc/bootblock')\nconst { BlockPool } = require('../bc/blockpool')\nconst { isValidBlockCached, validateSequenceDifficulty } = require('../bc/validation')\nconst { Block } = require('../protos/core_pb')\nconst { errToString } = require('../helper/error')\nconst { getVersion } = require('../helper/version')\nconst { MiningOfficer } = require('../mining/officer')\nconst { WorkerPool } = require('../mining/pool')\nconst ts = require('../utils/time').default // ES6 default export\n\nconst GEO_DB_PATH = resolve(__dirname, '..', '..', 'data', 'GeoLite2-City.mmdb')\n\nconst DATA_DIR = process.env.BC_DATA_DIR || config.persistence.path\nconst MONITOR_ENABLED = process.env.BC_MONITOR === 'true'\nconst BC_CHECK = process.env.BC_CHECK === 'true'\nconst PERSIST_ROVER_DATA = process.env.PERSIST_ROVER_DATA === 'true'\nconst BC_BT_VALIDATION = process.env.BC_BT_VALIDATION === 'true'\nconst BC_REMOVE_BTC = process.env.BC_REMOVE_BTC === 'true'\n\nprocess.on('uncaughtError', (err) => {\n  /* eslint-disable */\n    console.trace(err)\n    /* eslint-enable */\n  process.exit(3)\n})\n\n/* eslint-disable */\nexport class Engine {\n    _logger: Logger\n    _monitor: Monitor\n    _knownBlocksCache: LRUCache < string, BcBlock >\n    _knownEvaluationsCache: LRUCache < string, BcBlock >\n    _rawBlocks: LRUCache < number, Block >\n    _node: Node\n    _persistence: PersistenceRocksDb\n    _pubsub: PubSub\n    _rovers: RoverManager\n    _rpc: RpcServer\n    _server: Server\n    _emitter: EventEmitter\n    _minerKey: string // TODO only needed because of server touches that - should be passed using constructor?\n    _knownRovers: string[]\n    _verses: Multiverse[]\n    _rawBlock: Block[]\n    _subscribers: Object\n    _peerIsSyncing: boolean\n    _peerIsResyncing: boolean\n    _storageQueue: any\n    _blockCache: Block[]\n    _miningOfficer: MiningOfficer\n    _stepSyncTimestamps: Number[]\n\n    constructor(opts: {\n        rovers: string[],\n        minerKey: string\n    }) {\n        this._logger = getLogger(__filename)\n        this._knownRovers = opts.rovers\n        this._minerKey = opts.minerKey // TODO only needed because of server touches that - should be passed using constructor?\n        this._rawBlock = []\n        this._blockCache = []\n        this._monitor = new Monitor(this, {})\n        this._persistence = new PersistenceRocksDb(DATA_DIR)\n        this._pubsub = new PubSub()\n        this._node = new Node(this)\n        this._rovers = new RoverManager()\n        this._emitter = new EventEmitter()\n        this._rpc = new RpcServer(this)\n        this._server = new Server(this, this._rpc)\n        this._subscribers = {}\n        this._verses = []\n        this._stepSyncTimestamps = []\n        this._server.count = 0\n        this._storageQueue = queue((fn, cb) => {\n            return fn.then((res) => {\n                cb(null, res)\n            }).catch((err) => {\n                cb(err)\n            })\n        })\n\n        // Open Maxmind Geo DB\n        this._geoDb = maxmind.openSync(GEO_DB_PATH)\n\n        process.on('uncaughtError', function(err) {\n            this._logger.error(err)\n        })\n\n        this._knownEvaluationsCache = LRUCache({\n            max: config.engine.knownBlocksCache.max\n        })\n\n        this._knownBlocksCache = LRUCache({\n            max: config.engine.knownBlocksCache.max\n        })\n\n        this._rawBlocks = LRUCache({\n            max: config.engine.rawBlocksCache.max\n        })\n\n        this._peerIsSyncing = false\n        this._peerIsResyncing = false\n\n\n        // Start NTP sync\n        ts.start()\n    }\n\n    get geoDb(): Object {\n        return this._geoDb\n    }\n\n    // TODO only needed because of server touches that - should be passed using constructor?\n    get minerKey(): string {\n        return this._minerKey\n    }\n\n    /**\n     * Get WorkerPool\n     * @returns {WorkerPool|*}\n     */\n    get workerPool(): WorkerPool {\n        return this._workerPool\n    }\n\n    /**\n     * Get multiverse\n     * @returns {Multiverse|*}\n     */\n    get multiverse(): Multiverse {\n        return this.node.multiverse\n    }\n\n    set multiverse(multiverse: Multiverse) {\n        this.node.multiverse = multiverse\n    }\n\n    /**\n     * Get blockpool\n     * @returns {BlockPool|*}\n     */\n    get blockpool(): BlockPool {\n        return this.node.blockpool\n    }\n\n    /**\n     * Get pubsub wrapper instance\n     * @returns {PubSub}\n     */\n    get pubsub(): PubSub {\n        return this._pubsub\n    }\n\n    /**\n     * Initialize engine internals\n     *\n     * - Open database\n     * - Store name of available rovers\n     */\n    async init() {\n        const roverNames = Object.keys(rovers)\n        const {\n            npm,\n            git: {\n                long\n            }\n        } = getVersion()\n        const newGenesisBlock = getGenesisBlock()\n        const versionData = {\n            version: npm,\n            commit: long,\n            db_version: 1\n        }\n        const engineQueue = queue((fn, cb) => {\n            return fn.then((res) => {\n                cb(null, res)\n            }).catch((err) => {\n                cb(err)\n            })\n        })\n        const DB_LOCATION = resolve(`${__dirname}/../../${this.persistence._db.location}`)\n        const DELETE_MESSAGE = `DB data structure is stale, delete data folder '${DB_LOCATION}' and run bcnode again`\n        // TODO get from CLI / config\n        try {\n            await this._persistence.open()\n            try {\n                let version = await this.persistence.get('appversion')\n                if (semver.lt(version.version, '0.7.7')) { // GENESIS BLOCK 0.9\n                    this._logger.warn(DELETE_MESSAGE)\n                    process.exit(8)\n                }\n            } catch (_) {\n                // silently continue - the version is not present so\n                // a) very old db\n                // b) user just remove database so let's store it\n            }\n            let res = await this.persistence.put('rovers', roverNames)\n            if (res) {\n                this._logger.info('stored rovers to persistence')\n            }\n            res = await this.persistence.put('appversion', versionData)\n            if (res) {\n                this._logger.info('stored appversion to persistence')\n            }\n\n            if(BC_REMOVE_BTC === true){\n               this._logger.warn('REMOVE BTC BLOCK LATEST FLAG TRIGGERED')\n               await this.persistence.del('btc.block.latest')\n               await this.persistence.del('btc.block.546785')\n               await this.persistence.del('btc.block.546784')\n               await this.persistence.del('btc.block.546783')\n            }\n            /* eslint-disable */\n            try {\n                const latestBlock = await this.persistence.get('bc.block.latest')\n                await this.multiverse.addNextBlock(latestBlock)\n                await this.persistence.put('synclock', newGenesisBlock)\n                await this.persistence.put('bc.block.oldest', newGenesisBlock)\n                await this.persistence.put('bc.block.parent', newGenesisBlock)\n                await this.persistence.get('bc.block.1')\n                await this.persistence.put('bc.dht.quorum', '0')\n                /* eslint-disable */\n            } catch (_) { // genesis block not found\n                try {\n                    await this.persistence.put('synclock', newGenesisBlock)\n                    await this.persistence.put('bc.block.1', newGenesisBlock)\n                    await this.persistence.put('bc.block.latest', newGenesisBlock)\n                    await this.persistence.put('bc.block.parent', newGenesisBlock)\n                    await this.persistence.put('bc.block.oldest', newGenesisBlock)\n                    await this.persistence.put('bc.block.checkpoint', newGenesisBlock)\n                    await this.persistence.put('bc.dht.quorum', '0')\n                    await this.persistence.put('bc.depth', 2)\n                    await this.multiverse.addNextBlock(newGenesisBlock)\n                    this._logger.info('genesis block saved to disk ' + newGenesisBlock.getHash())\n                } catch (e) {\n                    this._logger.error(`error while creating genesis block ${e.message}`)\n                    process.exit(1)\n                }\n            }\n            if (process.env.BC_BOOT_BLOCK !== undefined) {\n                const bootBlock = getBootBlock(process.env.BC_BOOT_BLOCK)\n                await this.persistence.put('bc.block.latest', bootBlock)\n                await this.persistence.put('bc.block.' + bootBlock.getHeight(), bootBlock)\n                await this.multiverse._chain.unshift(bootBlock)\n                this._logger.warn('boot block ' + bootBlock.getHeight() + ' assigned as latest block')\n            }\n        } catch (e) {\n            this._logger.warn(`could not store rovers to persistence, reason ${e.message}`)\n        }\n\n        if (BC_CHECK === true) {\n            await this.integrityCheck()\n        }\n\n        if (MONITOR_ENABLED) {\n            this._monitor.start()\n        }\n\n        this.pubsub.subscribe('state.block.height', '<engine>', (msg) => {\n            this.storeHeight(msg).then((res) => {\n                if (res === true) {\n                    this._logger.info('wrote block ' + msg.data.getHeight())\n                }\n            }).catch((err) => {\n                this._logger.error(errToString(err))\n            })\n        })\n\n        this.pubsub.subscribe('update.checkpoint.start', '<engine>', (msg) => {\n            this._peerIsResyncing = true\n        })\n\n        this.pubsub.subscribe('update.mined.block', '<engine>', (msg) => {\n            this._logger.info('------ update.mined.block -----')\n        })\n\n        this.pubsub.subscribe('state.resync.failed', '<engine>', (msg) => {\n            this._logger.info('pausing mining to reestablish multiverse')\n            this._peerIsResyncing = true\n            engineQueue.push(this.blockpool.purge(msg.data), (err) => {\n                if (err) {\n                    this._logger.error(`Queued task failed, reason: ${err.message}`)\n                }\n            })\n        })\n\n        //[this.pubsub.subscribe('miner.block.new', (msg) => {\n        //[\t\t/* eslint-disable */\n        //[\t\tconsole.log('miner.block.new -----------> ')\n        //[\t\tconsole.log(msg)\n        //[})\n\n        //this.pubsub.subscribe('mined', (msg) => {\n        //\t\t/* eslint-disable */\n        //\t\tconsole.log('miner -----------> ')\n        //\t\tconsole.log(msg)\n        //})\n\n        this.pubsub.subscribe('state.checkpoint.end', '<engine>', (msg) => {\n            this._peerIsResyncing = false\n        })\n\n        this.pubsub.subscribe('update.block.latest', '<engine>', (msg) => {\n            try {\n                if (!this._knownEvaluationsCache.has(msg.data.getHash())) {\n                    this._knownEvaluationsCache.set(msg.data.getHash(), 1)\n                    // TODO: Check if any blocks are not the current one and reuse if its new\n                    // this could be rebase\n                    // this.miningOfficer.stopMining(this._workerPool)\n                    this.updateLatestAndStore(msg)\n                        .then((previousBlock) => {\n                            if (msg.mined !== undefined && msg.mined === true) {\n                                this._logger.info(`latest block ${msg.data.getHeight()} has been updated`)\n                            } else {\n                                // this.miningOfficer.rebaseMiner()\n                                // .then((state) => {\n                                //   this._logger.info(`latest block ${msg.data.getHeight()} has been updated`)\n                                // })\n                                // .catch((err) => {\n                                //   this._logger.error(`error occurred during updateLatestAndStore(), reason: ${err.message}`)\n                                // })\n                            }\n                            this._blockCache.length = 0\n                            //if(this._blockCache.length > 0){\n                            //    const candidates = this._blockCache.reduce((all, block) => {\n                            //      const blockchains = previousBlock.getBlockchainHeaders().toObject()\n                            //      const key = block.getBlockchain() + 'List'\n                            //      const headers = blockchains[key]\n                            //      const found = headers.reduce((f, header) => {\n                            //         if(all === false) {\n                            //           if(block.getHeight() > header.getHeight()){\n                            //              f = true\n                            //           }\n                            //         }\n                            //         return f\n                            //      }, false)\n\n                            //      if(found === true) {\n                            //        all.push(block)\n                            //      }\n                            //      return all\n                            //    }, [])\n                            //    this._blockCache.length = 0\n                            //    if(candidates.length > 0){\n                            //      this._blockCache = candidates\n                            //      const nextBlock = this._blockCache.shift()\n                            //      this.miningOfficer.newRoveredBlock(rovers, nextBlock, this._blockCache)\n                            //        .then((pid: number | false) => {\n                            //            if (pid !== false) {\n                            //                this._logger.info(`collectBlock handler: sent to miner`)\n                            //            }\n                            //        })\n                            //        .catch(err => {\n                            //            this._logger.error(`could not send to mining worker, reason: ${errToString(err)}`)\n                            //            process.exit()\n                            //        })\n\n                            //    }\n                            //}\n                        })\n                        .catch((err) => {\n                            this._logger.info(errToString(err))\n                            this._logger.error(`error occurred during updateLatestAndStore(), reason: ${err.message}`)\n                            process.exit()\n                        })\n                }\n            } catch (err) {\n                this._logger.error(err)\n            }\n        })\n\n        // GENERATE BLOCKS - BEGIN\n\n        const BC_PLUGIN = process.env.BC_PLUGIN\n        if (BC_PLUGIN) {\n            const pluginPath = resolve(join(__dirname, '..', '..', BC_PLUGIN))\n\n            try {\n                const plugin = require(pluginPath)\n                await plugin.main(this)\n            } catch (err) {\n                this._logger.error('PLUGIN ERROR', err)\n                this._logger.error(err)\n            }\n        }\n\n        this.pubsub.subscribe('miner.block.new', '<engine>', ({\n            unfinishedBlock,\n            solution\n        }) => {\n            return this._processMinedBlock(unfinishedBlock, solution).then((res) => {\n                    if (res === true) {\n                        return this._broadcastMinedBlock(unfinishedBlock, solution)\n                            .then((res) => {\n                                this._logger.info('broadcasted mined block', res)\n                            })\n                            .catch((err) => {\n                                this._logger.error(`mined block broadcast failed -> ${err.message}`)\n                            })\n                    }\n                })\n                .catch((err) => {\n                    this._logger.warn(err)\n                })\n        })\n\n        this._workerPool = new WorkerPool(this._pubsub,\n            this._persistence, {\n                minerKey: this._minerKey\n            })\n\n        this._miningOfficer = new MiningOfficer(this._pubsub, this._persistence, this._workerPool, {\n            minerKey: this._minerKey,\n            rovers: this._knownRovers\n        })\n\n        this._workerPool.emitter.on('mined', (data) => {\n            //this.miningOfficer.stopMining()\n            fkill('bcworker', { force: true }).then(() => {\n              this._logger.info('workers dismissed')\n            })\n            .catch((err) => {\n              this._logger.debug(err)\n            })\n            this.miningOfficer._handleWorkerFinishedMessage(data)\n        })\n\n        this._workerPool.emitter.on('blockCacheRebase', () => {\n            this._logger.info('block cache rebase requested')\n            this.persistence.get('bc.block.latest').then((previousBlock) => {\n                    if (this._blockCache.length > 0) {\n                        const candidates = this._blockCache.reduce((all, block) => {\n                            const blockchains = previousBlock.getBlockchainHeaders().toObject()\n                            const key = block.getBlockchain() + 'List'\n                            const headers = blockchains[key]\n                            const found = headers.reduce((f, header) => {\n                                if (all === false) {\n                                    if (block.getHeight() > header.getHeight()) {\n                                        f = true\n                                    }\n                                }\n                                return f\n                            }, false)\n\n                            if (found === true) {\n                                all.push(block)\n                            }\n                            return all\n                        }, [])\n                        this._blockCache.length = 0\n                        if (candidates.length > 0) {\n                            this._blockCache = candidates\n                            const nextBlock = this._blockCache.shift()\n                            this.miningOfficer.newRoveredBlock(rovers, nextBlock, this._blockCache)\n                                .then((pid: number | false) => {\n                                    if (pid !== false) {\n                                        this._logger.info(`collectBlock reassigned sent to miner`)\n                                    }\n                                })\n                                .catch(err => {\n                                    this._logger.error(`could not send to mining worker, reason: ${errToString(err)}`)\n                                    process.exit()\n                                })\n\n                        }\n                    }\n                })\n                .catch((err) => {\n                    this._logger.debug(err)\n                })\n        })\n        await this._miningOfficer.simMining()\n\n    }\n\n    /**\n     * Store a block in persistence unless its Genesis Block\n     * @returns Promise\n        ehs._logger.info('pmb' + 4)\n     */\n    async storeHeight(msg: Object) {\n        const block = msg.data\n        // Block is genesis block\n        if (block.getHeight() < 2) {\n            return\n        }\n        if (msg.force !== undefined && msg.force === true) {\n            try {\n                await this.persistence.put('bc.block.' + block.getHeight(), block)\n                return Promise.resolve(block)\n            } catch (err) {\n                this._logger.warn('unable to store block ' + block.getHeight() + ' - ' + block.getHash())\n                return Promise.reject(err)\n            }\n        } else {\n            try {\n                let prev = getGenesisBlock()\n                if ((block.getHeight() - 1) > 0) {\n                    prev = await this.persistence.get('bc.block.' + (block.getHeight() - 1))\n                }\n                if (prev.getHash() === block.getPreviousHash() &&\n                    new BN(prev.getTotalDistance()).lt(new BN(block.getTotalDistance()) === true)) {\n                    await this.persistence.put('bc.block.' + block.getHeight(), block)\n                    return Promise.resolve(true)\n                } else {\n                    return Promise.reject(new Error('block state did not match'))\n                }\n            } catch (err) {\n                await this.persistence.put('bc.block.' + block.getHeight(), block)\n                this._logger.warn(' stored orphan ' + block.getHeight() + ' - ' + block.getHash())\n                return Promise.resolve(true)\n            }\n        }\n    }\n\n    /**\n     * Store a block in persistence unless its Genesis Block\n     * @returns Promise\n     */\n    async updateLatestAndStore(msg: Object) {\n        const block = msg.data\n        let storeChildHeaders = {\n          btc: false,\n          neo: false,\n          lsk: true,\n          eth: false,\n          wav: false\n        }\n        if(msg.childHeaders !== undefined) {\n          storeChildHeaders = msg.childHeaders\n        }\n        // override all settings if validation mode is strict\n        if(BC_BT_VALIDATION === true) {\n          storeChildHeaders = {\n            btc: false,\n            neo: false,\n            lsk: false,\n            eth: true,\n            wav: false\n          }\n        }\n        this._logger.info('store block: ' + block.getHeight() + ' ' + block.getHash())\n        try {\n            const previousLatest = await this.persistence.get('bc.block.latest')\n            const parent = await this.persistence.get('bc.block.parent')\n            const synclock = await this.persistence.get('synclock')\n\n            // check if there is a decision tree cycle required\n            if (parent.getHash() !== previousLatest.getPreviousHash() &&\n                new BN(block.getTotalDistance()).gt(new BN(previousLatest.getTotalDistance())) &&\n                new BN(block.getTimestamp()).gte(new BN(previousLatest.getTimestamp()))) {\n                // reset to previousLatestPath\n                // behavior must be echoed in multiverse\n                await this.persistence.put('bc.block.latest', block)\n                await this.persistence.put('bc.block.' + block.getHeight(), block)\n                await this.persistence.putChildHeaders(block, storeChildHeaders)\n            } else if (previousLatest.getHash() === block.getPreviousHash() &&\n                new BN(block.getTimestamp()).gt(new BN(parent.getTimestamp())) === true &&\n                validateSequenceDifficulty(previousLatest, block) === true) {\n                await this.persistence.put('bc.block.parent', previousLatest)\n                await this.persistence.put('bc.block.latest', block)\n                await this.persistence.put('bc.block.' + block.getHeight(), block)\n                await this.persistence.putChildHeaders(block, storeChildHeaders)\n            } else if (previousLatest.getHeight() === 1) {\n                await this.persistence.put('bc.block.parent', previousLatest)\n                await this.persistence.put('bc.block.latest', block)\n                await this.persistence.put('bc.block.' + block.getHeight(), block)\n                await this.persistence.putChildHeaders(block, storeChildHeaders)\n            } else if (msg.force === true &&\n                msg.multiverse !== undefined &&\n                msg.multiverse.constructor === Array.constructor &&\n                synclock.getHeight() === 1) {\n                const oldest = msg.multiverse[msg.multiverse - 1]\n                // get the block before the oldest available block\n                const grandparent = await this.persistence.get('bc.block.' + oldest.getHeight() - 1)\n                if (oldest.getPreviousHash() !== grandparent.getHash()) {\n                    // this is a new chain branch and we must sync for it\n                    await this.persistence.put('synclock', oldest)\n                }\n                await this.persistence.put('bc.block.parent', msg.multiverse[1])\n                await this.persistence.put('bc.block.latest', block)\n                await this.persistence.put('bc.block.' + block.getHeight(), block)\n                await this.persistence.putChildHeaders(block, storeChildHeaders)\n                /*\n                 * Remove this after block 100,000\n                 */\n            } else if (msg.force === true &&\n                synclock.getHeight() === 1) {\n                await this.persistence.put('synclock', block)\n                // here we set it up so that on the next cycle we can compare paths\n                await this.persistence.put('bc.block.parent', previousLatest)\n                await this.persistence.put('bc.block.latest', block)\n                await this.persistence.put('bc.block.' + block.getHeight(), block)\n                await this.persistence.putChildHeaders(block, storeChildHeaders)\n            } else if (parent.getHash() === block.getPreviousHash()) {\n                await this.persistence.put('bc.block.parent', msg.multiverse[1])\n                await this.persistence.put('bc.block.latest', block)\n                await this.persistence.put('bc.block.' + block.getHeight(), block)\n                await this.persistence.putChildHeaders(block, storeChildHeaders)\n            } else {\n                this._logger.error('failed to set block ' + block.getHeight() + ' ' + block.getHash() + ' as latest block <- invalid chain')\n            }\n\n            if (msg.multiverse !== undefined) {\n                while (msg.multiverse.length > 0) {\n                    const b = msg.multiverse.pop()\n                    // strict local only write of genesis block\n                    if (b.getHeight() > 1) {\n                        await this.persistence.put('bc.block.' + b.getHeight(), b)\n                        await this.persistence.putChildHeaders(b, storeChildHeaders)\n                    }\n                }\n                return Promise.resolve(block)\n            }\n\n            if (this.miningOfficer._canMine === false) {\n                this._logger.info('determining if rovered headers include new child blocks')\n                const latestRoveredHeadersKeys: string[] = this.miningOfficer._knownRovers.map(chain => `${chain}.block.latest`)\n                const latestBlockHeaders = await this.persistence.getBulk(latestRoveredHeadersKeys)\n                latestBlockHeaders.map((r) => {\n                    if (this.miningOfficer._collectedBlocks[r.getBlockchain()] < 1) {\n                        this.miningOfficer._collectedBlocks[r.getBlockchain()]++\n                    }\n                })\n            }\n            return Promise.resolve(block)\n        } catch (err) {\n            this._logger.warn(err)\n            this._logger.error(errToString(err))\n            this._logger.warn('no previous block found')\n            if (block !== undefined && msg.force === true) {\n                await this.persistence.put('bc.block.parent', getGenesisBlock())\n                await this.persistence.put('bc.block.latest', block)\n                await this.persistence.put('bc.block.' + block.getHeight(), block)\n                await this.persistence.putChildHeaders(block, storeChildHeaders)\n            } else {\n                this._logger.warn('submitted block ' + block.getHeight() + ' ' + block.getHash() + ' will not be persisted')\n            }\n            if (msg.multiverse !== undefined) {\n                // assert the valid state of the entire sequence of each rovered chain\n                // DISABLED for BT: const multiverseIsValid = this.miningOfficer.validateRoveredSequences(msg.multiverse)\n                while (msg.multiverse.length > 0) {\n                    const b = msg.multiverse.pop()\n                    if (b.getHeight() > 1) {\n                        await this.persistence.put('bc.block.' + b.getHeight(), b)\n                        await this.persistence.putChildHeaders(b, storeChildHeaders)\n                    }\n                }\n                return Promise.resolve(block)\n            }\n            return Promise.resolve(block)\n        }\n    }\n\n    /**\n     * Get node\n     * @return {Node}\n     */\n    get node(): Node {\n        return this._node\n    }\n\n    /**\n     * Get rawBlock\n     * @return {Object}\n     */\n    get rawBlock(): ? Block {\n        return this._rawBlock\n    }\n\n    /**\n     * Set rawBlock\n     * @param block\n     */\n    set rawBlock(block: Block) {\n        this._rawBlock = block\n    }\n\n    /**\n     * Get persistence\n     * @return {Persistence}\n     */\n    get persistence(): PersistenceRocksDb {\n        return this._persistence\n    }\n\n    /**\n     * Get rovers manager\n     * @returns RoverManager\n     */\n    get rovers(): RoverManager {\n        return this._rovers\n    }\n\n    /**\n     * Get instance of RpcServer\n     * @returns RpcServer\n     */\n    get rpc(): RpcServer {\n        return this._rpc\n    }\n\n    /**\n     * Get instance of Server (Express on steroids)\n     * @returns Server\n     */\n    get server(): Server {\n        return this._server\n    }\n\n    get miningOfficer(): MiningOfficer {\n        return this._miningOfficer\n    }\n\n    /**\n     * Start Server\n     */\n    async startNode() {\n        this._logger.info('starting P2P node')\n        let nodeId\n        try {\n            this._logger.info('loading network key')\n            const now = Math.floor(Date.now() * 0.001)\n            const nodeObjectData = await this.persistence.get('bc.dht.id')\n            const nodeObject = JSON.parse(nodeObjectData)\n            nodeId = nodeObject.id\n            this._logger.info('network dht creation timestamp ' + nodeObject.timestamp)\n            const nodeTimestamp = nodeObject.timestamp\n\n            // if the key is more than 1 week old reset it\n            if (nodeTimestamp + 604800 < now) {\n                this._logger.warn('key needs to be set')\n                nodeId = crypto.createHash('sha1').update(crypto.randomBytes(32).toString('hex')).digest('hex')\n                this._logger.info('asssigned node ID <- ' + nodeId)\n                await this.persistence.put('bc.dht.id', JSON.stringify({\n                    id: nodeId,\n                    timestamp: Math.floor(Date.now() * 0.001)\n                }))\n            }\n        } catch (_) {\n            this._logger.warn('key needs to be set')\n            nodeId = crypto.createHash('sha1').update(crypto.randomBytes(32).toString('hex')).digest('hex')\n            this._logger.info('asssigned node key <- ' + nodeId)\n            await this.persistence.put('bc.dht.id', JSON.stringify({\n                id: nodeId,\n                timestamp: Math.floor(Date.now() * 0.001)\n            }))\n        }\n\n        this._emitter.on('peerCount', (count: Number) => {\n            if (this._server) {\n                this._server._wsBroadcastPeerConnected(count)\n            }\n        })\n\n        this._emitter.on('peerConnected', ({\n            peer\n        }) => {\n            if (this._server) {\n                this._server._wsBroadcastPeerConnected(peer)\n            }\n        })\n\n        this._emitter.on('peerDisconnected', ({\n            peer\n        }) => {\n            if (this._server) {\n                this._server._wsBroadcastPeerDisonnected(peer)\n            }\n        })\n        return this.node.start(nodeId)\n    }\n\n    /**\n     * Start rovers\n     * @param rovers - list (string; comma-delimited) of rover names to start\n     */\n    startRovers(rovers: string[]) {\n        this._logger.info(`starting rovers '${rovers.join(',')}'`)\n\n        rovers.forEach(name => {\n            if (name) {\n                this._rovers.startRover(name)\n            }\n        })\n\n\n        //if (Object.keys(this._workerPool._workers).length === 0) {\n        //}\n\n        this.workerPool.allRise().then(() => {\n                this._emitter.on('collectBlock', ({\n                    block\n                }) => {\n                    // Persist block if needed\n                    if (PERSIST_ROVER_DATA === true) {\n                        this._writeRoverData(block)\n                    }\n\n                    process.nextTick(() => {\n                        this.miningOfficer.newRoveredBlock(rovers, block, this._blockCache)\n                            .then((pid: number | false) => {\n                                if (pid !== false) {\n                                    this._logger.info(`collectBlock handler: sent to miner`)\n                                }\n                            })\n                            .catch(err => {\n                                this._logger.error(`could not send to mining worker, reason: ${errToString(err)}`)\n                                process.exit()\n                            })\n                    })\n                })\n            })\n            .catch((err) => {\n                this._logger.error(err)\n                this._logger.error('critical error required application close')\n                process.exit(3)\n            })\n    }\n\n    async integrityCheck() {\n        try {\n            await this.persistence.get('bc.block.1')\n            this._logger.info('chain integrity check running')\n            const limit = await this.persistence.stepFrom('bc.block', 1)\n            this._logger.info('chain integrity: ' + limit)\n            await this.persistence.flushFrom('bc.block', limit)\n            return Promise.resolve(limit)\n        } catch (err) {\n            this._logger.error(err)\n            this._logger.warn('unable to use default for integrity check')\n            try {\n                await this.persistence.set('bc.block.1', getGenesisBlock)\n                await this.persistence.flushFrom('bc.block', 1)\n            } catch (err) {\n                this._logger.error(err)\n            }\n            return Promise.resolve(1)\n        }\n    }\n\n    async sendPeerLatestBlock(conn: Object, newBlock: BcBlock): Promise < * > {\n        return conn.getPeerInfo((err, peerInfo) => {\n            if (err) {\n                this._logger.error(errToString(err))\n                return Promise.reject(err)\n            }\n\n            try {\n                const targetPeer = peerInfo.id.toB58String()\n                return this.node.sendBlockToPeer(newBlock, targetPeer)\n            } catch (err) {\n                return Promise.reject(err)\n            }\n            // request proof of the multiverse from the peer\n        })\n    }\n\n    /**\n     * Takes a range of blocks and validates them against within the contents of a parent and child\n     * TODO: Move this to a better location\n     * @param blocks BcBlock[]\n     */\n    async syncSetBlocksInline(blocks: BcBlock[], blockKey: ? string): Promise < Error | bool[] > {\n        let valid = true\n        if (blocks.length < 100) {\n            valid = await this.multiverse.validateBlockSequenceInline(blocks)\n        }\n        if (valid === false) {\n            return Promise.reject(new Error('invalid sequence of blocks')) // Enabled after target\n        }\n        let tasks = []\n        if (blockKey === undefined) {\n            tasks = blocks.map((item) => this.persistence.put('bc.block.' + item.getHeight(), item))\n        } else {\n            tasks = blocks.map((item) => this.persistence.put(blockKey + '.bc.block.' + item.getHeight(), item))\n        }\n        await Promise.all(tasks)\n        return Promise.resolve(tasks.length)\n    }\n\n    /**\n     * Determine if a sync request should be made to get the block\n     * TODO: Move this to P2P / better location\n     * @param conn Connection the block was received from\n     * @param newBlock Block itself\n     */\n    async proveTwo(conn: Object, newBlock: BcBlock): Promise < bool | Error > {\n        // disabled until\n        try {\n            this._logger.info('sync from depth start')\n            const depthData = await this.persistence.get('bc.depth')\n            const depth = parseInt(depthData, 10) // coerce for Flow\n            // const checkpoint = await this.persistence.get('bc.block.checkpoint')\n            // where the bottom of the chain is\n            // if the last height was not a genesis block and the depth was 2 then sync only to the height\n            if (depth === 2) {\n                // chain has be sequenced backwards until block of height 2\n                this._logger.info('depth is 2: sync from depth end')\n                return Promise.resolve(true)\n                // return Promise.resolve(true)\n            } else {\n                const upperBound = max(depth, 2) + 1 // so we dont get the genesis block\n                const lowBound = max(depth - 1000, 2) // Assigned during AT\n                return conn.getPeerInfo((err, peerInfo) => {\n                    if (err) {\n                        return Promise.reject(err)\n                    }\n                    return (async () => {\n                        const peerLockKey = 'bc.peer.' + peerInfo.id.toB58String()\n                        let peerLock = 1 // assume peer is busy\n                        try {\n                            peerLock = await this.persistence.get(peerLockKey)\n                        } catch (err) {\n                            // the lock does not exist\n                            peerLock = 0\n                        }\n                        if (peerLock === 1) {\n                            // dont send request because the peer is busy\n                            return Promise.resolve(true)\n                        } else {\n                            // request a range from the peer\n                            await this.persistence.put(peerLockKey, 1)\n                            // lock the depth for if another block comes while running this\n                            await this.persistence.put('bc.depth', upperBound)\n                            const query = {\n                                queryHash: newBlock.getHash(),\n                                queryHeight: newBlock.getHeight(),\n                                low: lowBound,\n                                high: upperBound\n                            }\n                            return this.node.manager.createPeer(peerInfo)\n                                .query(query)\n                                .then(blocks => {\n                                    this._logger.info(blocks.length + ' recieved')\n                                    return this.syncSetBlocksInline(blocks, 'pending')\n                                        .then((blocksStoredResults) => {\n                                            // if we didn't get the one block above the genesis block run again\n\n                                            /*\n                                             * test if it connects to the previous synced chain\n                                             * this would happen if a peer disconnected from the node\n                                             * and was now resyncing\n                                             */\n                                            // all done, no more depth clean up, unlock peer\n                                            return this.persistence.put(peerLockKey, 0)\n                                                .then(() => {\n                                                    return this.persistence.put('bc.depth', 2)\n                                                        .then(() => {\n                                                            return this.persistence.putPending('bc')\n                                                        })\n                                                        .catch((e) => {\n                                                            return Promise.reject(e)\n                                                        })\n                                                })\n                                                .catch(e => {\n                                                    this._logger.error(errToString(e))\n                                                    return Promise.reject(e)\n                                                })\n                                        })\n                                        .catch(e => {\n                                            this._logger.info('error has occured reading bounds')\n                                            this._logger.error(errToString(e))\n                                            // unlock the peer\n                                            return this.persistence.put(peerLockKey, 0)\n                                                .then(() => {\n                                                    return this.persistence.put('bc.depth', depth)\n                                                        .then(() => {\n                                                            return Promise.resolve(false)\n                                                        })\n                                                })\n                                                .catch(e => {\n                                                    // reset the depth\n                                                    return this.persistence.put('bc.depth', depth)\n                                                        .then(() => {\n                                                            return Promise.reject(e)\n                                                        })\n                                                })\n                                        })\n                                })\n                                .catch(e => {\n                                    // unlock the peer and reset the depth\n                                    return this.persistence.put(peerLockKey, 0)\n                                        .then(() => {\n                                            return this.persistence.put('bc.depth', depth)\n                                                .then(() => {\n                                                    return Promise.resolve(depth)\n                                                })\n                                        })\n                                })\n                        }\n                    })()\n                })\n            }\n        } catch (err) {\n            // no depth has been set\n            return Promise.reject(err)\n        }\n    }\n\n    async stepSyncHandler(msg: Object) {\n        let cancelSync = false\n        const now = Math.floor(Date.now() * 0.001)\n        const data = msg.data\n        const obj = {\n            connction: msg.connection\n        }\n\n        // sync is complete emit event\n        if (data.low.getHeight() < 3) {\n            this._emitter.emit('synccomplete', true)\n            this._stepSyncTimestamps.length = 0\n            await this.persistence.put('synclock', getGenesisBlock())\n            return\n        }\n\n        let previousTimestamp = now\n        if (this._stepSyncTimestamps.length > 0) {\n            previousTimestamp = this._stepSyncTimestamps[this._stepSyncTimestamps.length - 1]\n        }\n\n        this._logger.info('sync request returned from peer in ' + (now - previousTimestamp) + ' seconds')\n        await this.persistence.put('synclock', data.low)\n\n        const high = max(3, data.low.getHeight())\n        const low = max(2, high - 500)\n        obj.data = {\n            low: low,\n            high: high\n        }\n        if (cancelSync === false) {\n            this._emitter.emit('getblocklist', obj)\n        }\n    }\n\n    stepSync(conn: Object, height: Number, syncBlockHash: string): Promise < * > {\n        this._logger.info('step sync from height: ' + height)\n        // return new Promise(resolve, reject) {\n        // check if peer is known to be slow\n        return this.persistence.get('synclock')\n            .then((syncBlock) => {\n                if (syncBlock.getHash() !== syncBlockHash) {\n                    // Another sync override --> break step\n                    this._logger.warn('previous step sync canceled <- mismatched sync lock hash')\n                    return Promise.resolve(false)\n                }\n\n                if (height < 3) {\n                    return this.persistence.put('synclock', getGenesisBlock()).then(() => {\n                        this._logger.info('sync reset')\n                    })\n                }\n\n                return conn.getPeerInfo((err, peerInfo) => {\n                    if (err) {\n                        this._logger.error(err)\n                        return this.persistence.put('synclock', getGenesisBlock()).then(() => {\n                            this._logger.info('sync reset')\n                        })\n                    } else {\n                        // check if peer is known to have been slow with event type 2\n                        if (this.node.manager.getPeerEvent(peerInfo.id.toB58String(),\n                                2) > 0) {\n                            return this.persistence.put('synclock', getGenesisBlock()).then(() => {\n                                    this._logger.info('sync reset')\n                                    return Promise.resolve(true)\n                                })\n                                .catch((e) => {\n                                    this._logger.error(e)\n                                    return Promise.resolve(false)\n                                })\n                        }\n\n                        if (syncBlock.getHeight() !== 1 && syncBlock.getHash() === syncBlockHash) {\n                            const low = max(height - 2500, 2)\n                            const query = {\n                                queryHash: '0000',\n                                queryHeight: height,\n                                low: low,\n                                high: height\n                            }\n                            return this.node.manager.createPeer(peerInfo)\n                                .query(query)\n                                .then(newBlocks => {\n                                    this._logger.info(newBlocks.length + ' recieved')\n                                    return this.syncSetBlocksInline(newBlocks)\n                                        .then((blocksStoredResults) => {\n                                            const lowest = newBlocks[0]\n                                            return this.persistence.put('bc.block.oldest', lowest)\n                                                .then(() => {\n                                                    return this.stepSync(conn, low, syncBlockHash)\n                                                })\n                                        })\n                                        .catch((err) => {\n                                            this._logger.warn('sync failed')\n                                            this._logger.error(err)\n                                            this.node.manager.putPeerEvent(peerInfo.id.toB58String(), 2)\n                                            return Promise.resolve(false)\n                                        })\n                                })\n                                .catch((e) => {\n                                    this._logger.warn('sync failed')\n                                    this._logger.error(e)\n                                    this.node.manager.putPeerEvent(peerInfo.id.toB58String(), 2)\n                                    return this.persistence.put('synclock', getGenesisBlock()).then(() => {\n                                        this._logger.info('sync reset')\n                                        return Promise.resolve(true)\n                                    })\n                                })\n                        } else {\n                            this._logger.warn('sync canceled')\n                            return Promise.resolve(true)\n                        }\n                    }\n                })\n            })\n            .catch((e) => {\n                this._logger.warn('sync failed')\n                this._logger.error(e)\n                return this.persistence.put('synclock', getGenesisBlock()).then(() => {\n                    this._logger.info('sync reset')\n                })\n            })\n    }\n\n    /**\n     * New block received from peer handler\n     * @param conn Connection the block was received from\n     * @param newBlock Block itself\n     */\n    blockFromPeer(conn: Object, newBlock: BcBlock): void {\n        // Test if new block has been seen before\n        if (newBlock && !this._knownBlocksCache.get(newBlock.getHash())) {\n            // Add block to LRU cache to avoid processing the same block twice\n            debug(`Adding received block into cache of known blocks - ${newBlock.getHash()}`)\n            this._knownBlocksCache.set(newBlock.getHash(), 1)\n            this._logger.info('received new block from peer', newBlock.getHeight())\n\n            // EVAL NEXT\n            // is newBlock next after currentHighestBlock? (all)\n            // [] - newBlock previousHash is hash of currentHighestBlock\n            // [] - newBlock timestamp > currentHighestBlock timestamp\n            // [] - newBlock totalDifficulty > currentHighestBlock totalDifficulty\n            // [] - newBlock connected chain heights > currentHighestBlock connected chain heights\n\n            // 1 EVAL REJECT / RESYNC\n            // * requires currentParentHighestBlock\n            // when does newBlock trigger resync after multiverse rejection (pick any)\n            // [] = newBlock has greater totalDifficulty\n            // [] = greater child heights of the parentHighestBlock\n            //\n            // 2 EVAL REJECT / RESYNC\n            // when no parentBlockExists (light client / early sync)\n            // [] = newBlock has greater totalDifficulty\n            //\n            // after target adds weighted fusion positioning to also evaluate block  -> (X1,Y1) = D1/D1 + D2 * (X1,Y1) + D2 / D1 + D2 * (X2, Y2)\n            // encourages grouped transactions from one tower to be more likely to enter a winning block in batch due to lowest distance\n            //\n            isValidBlockCached(this.persistence, newBlock, 1).then((valid) => {\n                if (valid === true) {\n\n                    this._logger.info('purposed block peer ' + newBlock.getHeight())\n                    return this.multiverse.addNextBlock(newBlock).then((isNextBlock) => {\n                            if (isNextBlock === true) {\n\n                                let options = {\n                                    key: 'bc.block.latest',\n                                    data: newBlock,\n                                    childHeaders: {\n                                      btc: true,\n                                      eth: true,\n                                      lsk: true,\n                                      wav: true,\n                                      neo: true\n                                    }\n                                }\n                                if (this.multiverse._chain.length > 1) {\n                                    this._logger.info('new block ' + newBlock.getHash() + ' references previous Block ' + newBlock.getPreviousHash() + ' for block ' + this.multiverse._chain[1].getHash())\n                                }\n                                this._logger.info('block ' + newBlock.getHeight() + ' considered next block in current multiverse ')\n                                // RESTART MINING USED newBlock.getHash()\n                                if (BC_BT_VALIDATION === true) {\n                                  delete options.childHeaders\n                                  this.pubsub.publish('update.block.latest', options)\n                                } else {\n                                  this.pubsub.publish('update.block.latest', options)\n                                }\n                                // notify the miner\n                                this.node.broadcastNewBlock(newBlock, conn)\n                            } else {\n                                this._logger.info('block from peer ' + newBlock.getHeight() + ' is NOT next in multiverse block -> evaluating as sync candidate.')\n                                return this.multiverse.addResyncRequest(newBlock, this.miningOfficer._canMine)\n                                    .then(shouldResync => {\n                                        if (shouldResync === true) {\n\n                                            this._logger.info(newBlock.getHash() + ' <- new block: ' + newBlock.getHeight() + ' should sync request approved')\n\n                                            // const host = conn.remoteHost || conn.remoteAddress\n                                            // const port = conn.remotePort || conn.port\n\n                                            /* eslint-disable */\n                                            /////////// MULTIVERSE PROOF //////////////\n                                            const obj = {\n                                                data: {\n                                                    high: newBlock.getHeight(),\n                                                    low: new BN(newBlock.getHeight()).sub(new BN(7)).toNumber()\n                                                },\n                                                connection: conn\n                                            }\n\n                                            this.pubsub.publish('update.block.latest', {\n                                                key: 'bc.block.latest',\n                                                data: newBlock,\n                                                force: true,\n                                                mined: false\n                                            })\n\n                                            let storeChildHeaders = {\n                                              btc: false,\n                                              neo: true,\n                                              lsk: false,\n                                              eth: true,\n                                              wav: true\n                                            }\n                                            if(BC_BT_VALIDATION === true) {\n                                              storeChildHeaders = {\n                                                btc: false,\n                                                neo: false,\n                                                lsk: false,\n                                                eth: true,\n                                                wav: false\n                                              }\n                                            }\n                                            this.persistence.putChildHeaders(newBlock, storeChildHeaders).then(() => {\n                                                    // note the local machine does not broadcast this block update until the multiverse has been proven\n                                                    // parent headers do not form a chain\n                                                    this._emitter.emit('getmultiverse', obj)\n                                                })\n                                                .catch((err) => {\n                                                    this._logger.error(err)\n                                                })\n\n                                        } else {\n                                            // this means the local peer has a better version of the chain and\n                                            // therefore pushing it to the outside peer\n                                            this._emitter.emit('sendblock', {\n                                                data: newBlock,\n                                                connection: conn\n                                            })\n                                        }\n                                    })\n                            }\n                        })\n                        .catch((multiverseError) => {\n                            this._logger.error(multiverseError)\n                        })\n                } else {\n                    this._logger.warn('block from peer invalid')\n                }\n            })\n        }\n    }\n\n    getMultiverseHandler(conn: Object, newBlocks: BcBlock[]): Promise <boolean> {\n        // get the lowest of the current multiverse\n        try {\n            // REPLACE this.miningOfficer.stopMining(this._workerPool)\n            this._logger.info('end mining')\n            return true\n        } catch (e) {\n            this._logger.error(e)\n        }\n\n        if (newBlocks === undefined || newBlocks.length < 7) {\n            this._logger.warn('incomplete multiverse proof')\n            return true\n        }\n\n        const sorted = newBlocks.sort((a, b) => {\n            if (new BN(a.getHeight()).gt(new BN(b.getHeight())) === true) {\n                return -1\n            }\n            if (new BN(a.getHeight()).lt(new BN(b.getHeight())) === true) {\n                return 1\n            }\n            return 0\n        })\n\n        const newBlock = sorted[0]\n        const highestBlock = this.multiverse.getHighestBlock()\n\n        this._logger.info('comparable blocks: ' + sorted.length)\n        this._logger.info(newBlock.getHash() + ' height: ' + newBlock.getHeight() + ' comparing with ' + highestBlock.getHash() + ' height: ' + highestBlock.getHeight())\n        let conditional = false\n        // means the newBlock is the newest best highest block\n        if (highestBlock.getHash() === newBlock.getHash()) {\n            conditional = true\n        } else if (highestBlock !== undefined && sorted !== undefined && sorted.length > 0) {\n            // conanaOut\n            conditional = new BN(sorted[0].getTotalDistance()).gt(new BN(highestBlock.getTotalDistance()))\n            if (conditional === false) {\n                this._logger.info('purposed new block has lower total difficulty than current multiverse height')\n            }\n        } else if (sorted.length < 6) {\n            conditional = true\n        }\n\n        if (conditional === true) {\n            // overwrite current multiverse\n            const hasBlock = this.multiverse.hasBlock(sorted[0])\n            this._logger.info(newBlock.getHash() + ' approved --> assigning as current multiverse')\n            this.multiverse._chain.length = 0\n            this.multiverse._chain = this.multiverse._chain.concat(sorted)\n            this._logger.info('multiverse has been assigned')\n\n            return this.syncSetBlocksInline(sorted)\n                .then((blocksStoredResults) => {\n                    return this.persistence.put('bc.depth', sorted[0].getHeight())\n                        .then(() => {\n                            // if the block is already in the multiverse dont conduct a full sync\n                            if (hasBlock === false) {\n                                this._logger.info('legacy multiverse did not include current block')\n\n                                // determine if a sync is already in progress\n                                return this.multiverse.isSyncLockActive().then((lock) => {\n                                        if (lock === false) {\n                                            this._logger.info('lock is set to false')\n                                            return this.persistence.put('synclock', this.multiverse.getHighestBlock())\n                                                .then(() => {\n                                                    this._logger.info('synclock was set to ' + this.multiverse.getHighestBlock())\n                                                    this.pubsub.publish('update.block.latest', {\n                                                        key: 'bc.block.latest',\n                                                        data: newBlock,\n                                                        force: true,\n                                                        multiverse: this.multiverse._chain,\n                                                        childHeaders: {\n                                                          btc: true,\n                                                          eth: true,\n                                                          neo: true,\n                                                          lsk: true,\n                                                          wav: true\n                                                        }\n                                                    })\n                                                    this.node.broadcastNewBlock(newBlock, conn)\n                                                    this._logger.debug('sync unlocked')\n                                                    const targetHeight = this.multiverse.getLowestBlock().getHeight() - 1\n                                                    // dont have to sync\n                                                    if (targetHeight < 2) {\n                                                        return Promise.resolve(true)\n                                                    }\n\n                                                    this._emitter.emit('getblocklist', {\n                                                        data: {\n                                                            low: max(2, newBlock.getHeight() - 500),\n                                                            high: max(3, newBlock.getHeight())\n                                                        },\n                                                        connection: conn\n                                                    })\n\n                                                    return Promise.resolve(true)\n                                                })\n                                                .catch((e) => {\n                                                    this._logger.error(e)\n                                                    return this.persistence.put('synclock', getGenesisBlock()).then(() => {\n                                                            this._logger.info('sync reset')\n                                                        })\n                                                        .catch((e) => {\n                                                            this._logger.error(e)\n                                                        })\n                                                })\n                                        } else {\n                                            this.pubsub.publish('update.block.latest', {\n                                                key: 'bc.block.latest',\n                                                data: newBlock,\n                                                force: true,\n                                                multiverse: this.multiverse._chain\n                                            })\n                                            this.node.broadcastNewBlock(newBlock)\n                                            return Promise.resolve(true)\n                                        }\n                                    })\n                                    .catch((e) => {\n                                        this._logger.error(e)\n                                        return Promise.reject(e)\n                                    })\n                            } else {\n                                return this.persistence.put('synclock', getGenesisBlock()).then(() => {\n                                    this._logger.info('sync reset')\n                                })\n                            }\n                            // assign where the last sync began\n                        })\n                        .catch(e => {\n                            this._logger.error(errToString(e))\n                            return this.persistence.put('synclock', getGenesisBlock()).then(() => {\n                                    this._logger.info('sync reset')\n                                })\n                                .catch((e) => {\n                                    this._logger.error(e)\n                                })\n                        })\n                })\n\n                .catch((e) => {\n                    this._logger.error(e)\n                    return Promise.resolve(true)\n                })\n        } else {\n            this._logger.info('resync conditions failed')\n            return this.persistence.put('synclock', getGenesisBlock()).then(() => {\n                    this._logger.info('sync reset')\n                })\n                .catch((e) => {\n                    this._logger.error(e)\n                })\n        }\n    }\n\n    receiveSyncPeriod(peerIsSyncing: bool) {\n        this._logger.info('peer sync request')\n    }\n\n    /**\n     * Start Server\n     *\n     * @param opts Options to start server with\n     */\n    startServer(opts: Object) {\n        this.server.run(opts)\n    }\n\n    requestExit() {\n        ts.stop()\n        this.miningOfficer.stop()\n        return this._rovers.killRovers()\n    }\n\n    _writeRoverData(newBlock: BcBlock) {\n        const dataPath = ensureDebugPath(`bc/rover-block-data.csv`)\n        const rawData = JSON.stringify(newBlock)\n        writeFileSync(dataPath, `${rawData}\\r\\n`, {\n            encoding: 'utf8',\n            flag: 'a'\n        })\n    }\n\n    /**\n     * Broadcast new block\n     *\n     * - peers\n     * - pubsub\n     * - ws\n     *\n     * This function is called by this._processMinedBlock()\n     * @param newBlock\n     * @param solution\n     * @returns {Promise<boolean>}\n     * @private\n     */\n    _broadcastMinedBlock(newBlock: BcBlock, solution: Object): Promise < boolean > {\n        if (newBlock === undefined) {\n            return Promise.reject(new Error('cannot broadcast empty block'))\n        }\n\n        try {\n            this._logger.info('broadcasting block challenge ' + newBlock.getHeight() + ' -> considered next block in current multiverse')\n            this.node.broadcastNewBlock(newBlock)\n\n            // NOTE: Do we really need nested try-catch ?\n            try {\n                const newBlockObj = {\n                    ...newBlock.toObject(),\n                    iterations: solution.iterations,\n                    timeDiff: solution.timeDiff\n                }\n                this.pubsub.publish('block.mined', {\n                    type: 'block.mined',\n                    data: newBlockObj\n                })\n            } catch (e) {\n                return Promise.reject(e)\n            }\n        } catch (err) {\n            return Promise.reject(err)\n        }\n\n        return Promise.resolve(true)\n    }\n\n    /**\n     * Deals with unfinished block after the solution is found\n     *\n     * @param newBlock\n     * @param solution\n     * @returns {Promise<boolean>} Promise indicating if the block was successfully processed\n     * @private\n     */\n    _processMinedBlock(newBlock: BcBlock, solution: Object): Promise < bool > {\n        // TODO: reenable this._logger.info(`Mined new block: ${JSON.stringify(newBlockObj, null, 2)}`)\n        // Trying to process null/undefined block\n        if (newBlock === null || newBlock === undefined) {\n            this._logger.warn('Failed to process work provided by miner')\n            return Promise.resolve(false)\n        }\n\n        // Prevent submitting mined block twice\n        if (this._knownBlocksCache.has(newBlock.getHash())) {\n            this._logger.warn('received duplicate new block ' + newBlock.getHeight() + ' (' + newBlock.getHash() + ')')\n            try {\n                // REPLACE this.miningOfficer.stopMining(this._workerPool)\n                this._logger.info('end mining')\n                return Promise.resolve(true)\n            } catch (e) {\n                this._logger.warn('unable to stop miner')\n                this._logger.error(e)\n                return Promise.resolve(false)\n            }\n        }\n\n        this._knownBlocksCache.set(newBlock.getHash(), 1)\n        this._logger.info('submitting mined block to current multiverse')\n        return this.multiverse.addNextBlock(newBlock)\n            .then((isNextBlock) => {\n                // $FlowFixMe\n                // if (isNextBlock) {\n                // TODO: this will break now that _blocks is not used in multiverse\n                // if (this.multiverse.getHighestBlock() !== undefined &&\n                //    this.multiverse.validateBlockSequenceInline([this.multiverse.getHighestBlock(), newBlock]) === true) {\n                if (isNextBlock === true || BC_BT_VALIDATION === true) {\n                    let options = {\n                        key: 'bc.block.latest',\n                        data: newBlock,\n                        mined: true\n                    }\n\n                    if(BC_BT_VALIDATION === true){\n                      options.force = true\n                    }\n\n                    this.pubsub.publish('update.block.latest', options)\n                    this._server._wsBroadcastMultiverse(this.multiverse)\n                    this._logger.info('multiverse coverage: ' + this.multiverse._chain.length)\n                    // check if we know the peer\n                    return Promise.resolve(true)\n                } else if(BC_BT_VALIDATION !== true) {\n                    this._logger.warn('local mined block ' + newBlock.getHeight() + ' does not stack on multiverse height ' + this.multiverse.getHighestBlock().getHeight())\n                    this._logger.warn('mined block ' + newBlock.getHeight() + ' cannot go on top of multiverse block ' + this.multiverse.getHighestBlock().getHash())\n                    return Promise.resolve(true)\n                    //return this.miningOfficer.rebaseMiner()\n                    //  .then((res) => {\n                    //    this._logger.info(res)\n                    //  })\n                    //  .catch((e) => {\n                    //    this._logger.error(errToString(e))\n                    //  })\n                }\n            })\n            .catch((err) => {\n                this._logger.error(err)\n                return Promise.resolve(false)\n            })\n    }\n}\n\nexport default Engine\n"]}